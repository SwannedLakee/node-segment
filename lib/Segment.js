/**
 * 分词器接口
 *
 * @author 老雷<leizongmin@gmail.com>
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const get_1 = require("./fs/get");
const blacklist_1 = require("./table/blacklist");
const dict_1 = require("./table/dict");
const loader_1 = require("./loader");
const stopword_1 = require("./table/stopword");
const synonym_1 = require("./table/synonym");
const segment_dict_1 = require("segment-dict");
const project_config_1 = require("../project.config");
const core_1 = require("./segment/core");
const defaults_1 = require("./segment/defaults");
const index_1 = require("./defaults/index");
const useModules2_1 = require("./segment/methods/useModules2");
/**
 * 创建分词器接口
 */
class Segment extends core_1.default {
    getDictDatabase(type, autocreate, libTableDict) {
        if ((autocreate || this.inited) && !this.db[type]) {
            if (type == synonym_1.default.type) {
                libTableDict = libTableDict || synonym_1.default;
            }
            else if (type == stopword_1.TableDictStopword.type) {
                libTableDict = libTableDict || stopword_1.TableDictStopword;
            }
            else if (type == blacklist_1.default.type) {
                libTableDict = libTableDict || stopword_1.TableDictStopword;
            }
            else {
                libTableDict = libTableDict || dict_1.TableDict;
            }
            this.db[type] = new libTableDict(type, this.options, {
                TABLE: this.DICT[type],
            });
        }
        return this.db[type];
    }
    use(mod, ...argv) {
        useModules2_1.useModules(this, mod, ...argv);
        this.inited = true;
        return this;
    }
    _resolveDictFilename(name, pathPlus = [], extPlus = []) {
        let options = {
            paths: [
                '',
                project_config_1.default.dict_root,
                ...pathPlus,
                path.resolve(segment_dict_1.default.DICT_ROOT, 'segment'),
            ],
            extensions: [
                '',
                ...extPlus,
                '.utf8',
                '.txt',
            ],
            onlyFile: true,
        };
        if (name.indexOf('*') != -1) {
            let ls = get_1.searchGlobSync(name, options);
            if (!ls || !ls.length) {
                throw Error(`Cannot find dict glob file "${name}".`);
            }
            return ls;
        }
        let filename = get_1.searchFirstSync(name, options);
        if (!filename) {
            //console.log(name, pathPlus, extPlus);
            throw Error(`Cannot find dict file "${name}".`);
        }
        return filename;
    }
    /**
     * 载入字典文件
     *
     * @param {String} name 字典文件名
     * @param {String} type 类型
     * @param {Boolean} convert_to_lower 是否全部转换为小写
     * @return {Segment}
     */
    loadDict(name, type, convert_to_lower, skipExists) {
        let filename = this._resolveDictFilename(name);
        if (Array.isArray(filename)) {
            let self = this;
            filename.forEach(v => this.loadDict(v, type, convert_to_lower, skipExists));
            //console.log(filename);
            return this;
        }
        if (!type)
            type = 'TABLE'; // 默认为TABLE
        const db = this.getDictDatabase(type, true);
        const TABLE = this.DICT[type] = db.TABLE;
        const TABLE2 = this.DICT[type + '2'] = db.TABLE2;
        /*
        // 初始化词典
        if (!this.DICT[type]) this.DICT[type] = {};
        if (!this.DICT[type + '2']) this.DICT[type + '2'] = {};
        let TABLE = this.DICT[type];        // 词典表  '词' => {属性}
        let TABLE2 = this.DICT[type + '2']; // 词典表  '长度' => '词' => 属性
        */
        // 导入数据
        const POSTAG = this.POSTAG;
        let data = loader_1.default.SegmentDictLoader.loadSync(filename);
        data.forEach(function (data) {
            if (convert_to_lower) {
                data[0] = data[0].toLowerCase();
            }
            db.add(data, skipExists);
            /*
            let [w, p, f] = data;

            if (w.length == 0)
            {
                throw new Error()
            }

            TABLE[w] = { p, f, };
            if (!TABLE2[w.length]) TABLE2[w.length] = {};
            TABLE2[w.length][w] = TABLE[w];
            */
        });
        data = undefined;
        this.inited = true;
        return this;
    }
    /**
     * 载入同义词词典
     *
     * @param {String} name 字典文件名
     */
    loadSynonymDict(name, skipExists) {
        let filename = this._resolveDictFilename(name, [
            path.resolve(segment_dict_1.default.DICT_ROOT, 'synonym'),
        ]);
        if (Array.isArray(filename)) {
            let self = this;
            filename.forEach(v => this.loadSynonymDict(v, skipExists));
            return this;
        }
        let type = 'SYNONYM';
        const db = this.getDictDatabase(type, true);
        const TABLE = this.DICT[type] = db.TABLE;
        /*
        // 初始化词典
        if (!this.DICT[type]) this.DICT[type] = {};
        // 词典表  '同义词' => '标准词'
        let TABLE = this.DICT[type] as IDICT_SYNONYM;
        // 导入数据
        */
        let data = loader_1.default.SegmentSynonymLoader.loadSync(filename);
        data.forEach(function (blocks) {
            db.add(blocks, skipExists);
            /*
            let [n1, n2] = blocks;

            TABLE[n1] = n2;
            if (TABLE[n2] === n1)
            {
                delete TABLE[n2];
            }
            */
        });
        //console.log(TABLE);
        data = undefined;
        this.inited = true;
        return this;
    }
    _loadBlacklistDict(name, type) {
        let filename = this._resolveDictFilename(name, [
            path.resolve(segment_dict_1.default.DICT_ROOT, 'blacklist'),
        ]);
        if (Array.isArray(filename)) {
            let self = this;
            filename.forEach(v => this._loadBlacklistDict(v, type));
            return this;
        }
        const db = this.getDictDatabase(type, true);
        const TABLE = this.DICT[type] = db.TABLE;
        let data = loader_1.default.SegmentDict
            .requireLoaderModule('line')
            .loadSync(filename, {
            filter(line) {
                return line.trim();
            },
        });
        data.forEach(v => db.add(v));
        data = undefined;
        this.inited = true;
        return this;
    }
    loadBlacklistDict(name) {
        return this._loadBlacklistDict(name, "BLACKLIST" /* BLACKLIST */);
    }
    loadBlacklistOptimizerDict(name) {
        return this._loadBlacklistDict(name, "BLACKLIST_FOR_OPTIMIZER" /* BLACKLIST_FOR_OPTIMIZER */);
    }
    /**
     * 载入停止符词典
     *
     * @param {String} name 字典文件名
     */
    loadStopwordDict(name) {
        let filename = this._resolveDictFilename(name, [
            path.resolve(segment_dict_1.default.DICT_ROOT, 'stopword'),
        ]);
        if (Array.isArray(filename)) {
            let self = this;
            filename.forEach(v => this.loadStopwordDict(v));
            return this;
        }
        const type = "STOPWORD" /* STOPWORD */;
        const db = this.getDictDatabase(type, true);
        const TABLE = this.DICT[type] = db.TABLE;
        let data = loader_1.default.SegmentDict
            .requireLoaderModule('line')
            .loadSync(filename, {
            filter(line) {
                return line.trim();
            },
        });
        data.forEach(v => db.add(v));
        data = undefined;
        this.inited = true;
        return this;
    }
    /**
     * 使用默认的识别模块和字典文件
     * 在使用預設值的情況下，不需要主動呼叫此函數
     *
     * @return {Segment}
     */
    useDefault(...argv) {
        index_1.useDefault(this, ...argv);
        this.inited = true;
        return this;
    }
    /**
     * 此函數只需執行一次，並且一般狀況下不需要手動呼叫
     */
    autoInit(options) {
        if (!this.inited) {
            this.inited = true;
            if (!this.modules.tokenizer.length) {
                this.useDefault(options);
            }
        }
        return this;
    }
    addBlacklist(word, remove) {
        let me = this;
        this.autoInit(this.options);
        const BLACKLIST = me.getDictDatabase("BLACKLIST" /* BLACKLIST */);
        const TABLE = me.getDictDatabase("TABLE" /* TABLE */);
        let bool = !remove;
        if (bool) {
            BLACKLIST.add(word);
            TABLE.remove(word);
        }
        else {
            BLACKLIST.remove(word);
        }
        return this;
    }
    /**
     * remove key in TABLE by BLACKLIST
     */
    doBlacklist() {
        let me = this;
        this.autoInit(this.options);
        const BLACKLIST = me.getDict("BLACKLIST" /* BLACKLIST */);
        const TABLE = me.getDictDatabase("TABLE" /* TABLE */);
        Object.entries(BLACKLIST)
            .forEach(function ([key, bool]) {
            bool && TABLE.remove(key);
        });
        return this;
    }
    doSegment(text, options = {}) {
        this.autoInit(this.options);
        return super.doSegment(text, options);
    }
}
exports.Segment = Segment;
Segment.defaultOptionsDoSegment = defaults_1.defaultOptionsDoSegment;
exports.default = Segment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VnbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlZ21lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILFlBQVksQ0FBQzs7QUFFYiw2QkFBNkI7QUFDN0Isa0NBQTJEO0FBRTNELGlEQUFtRDtBQUVuRCx1Q0FBd0U7QUFFeEUscUNBQThCO0FBRTlCLCtDQUFxRDtBQUNyRCw2Q0FBK0M7QUFDL0MsK0NBQXVDO0FBS3ZDLHNEQUE4QztBQWtCOUMseUNBQXlDO0FBR3pDLGlEQUE2RDtBQUM3RCw0Q0FBOEM7QUFDOUMsK0RBQTJEO0FBRTNEOztHQUVHO0FBQ0gsTUFBYSxPQUFRLFNBQVEsY0FBVztJQTZCdkMsZUFBZSxDQUFDLElBQVksRUFBRSxVQUFvQixFQUFFLFlBQWE7UUFFaEUsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNqRDtZQUNDLElBQUksSUFBSSxJQUFJLGlCQUFnQixDQUFDLElBQUksRUFDakM7Z0JBQ0MsWUFBWSxHQUFHLFlBQVksSUFBSSxpQkFBZ0IsQ0FBQzthQUNoRDtpQkFDSSxJQUFJLElBQUksSUFBSSw0QkFBaUIsQ0FBQyxJQUFJLEVBQ3ZDO2dCQUNDLFlBQVksR0FBRyxZQUFZLElBQUksNEJBQWlCLENBQUM7YUFDakQ7aUJBQ0ksSUFBSSxJQUFJLElBQUksbUJBQWtCLENBQUMsSUFBSSxFQUN4QztnQkFDQyxZQUFZLEdBQUcsWUFBWSxJQUFJLDRCQUFpQixDQUFDO2FBQ2pEO2lCQUVEO2dCQUNDLFlBQVksR0FBRyxZQUFZLElBQUksZ0JBQVMsQ0FBQzthQUN6QztZQUVELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ3BELEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFD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biAqIEBhdXRob3Ig6ICB6Zu3PGxlaXpvbmdtaW5AZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHNlYXJjaEZpcnN0U3luYywgc2VhcmNoR2xvYlN5bmMgfSBmcm9tICcuL2ZzL2dldCc7XG5pbXBvcnQgUE9TVEFHIGZyb20gJy4vUE9TVEFHJztcbmltcG9ydCBUYWJsZURpY3RCbGFja2xpc3QgZnJvbSAnLi90YWJsZS9ibGFja2xpc3QnO1xuaW1wb3J0IEFic3RyYWN0VGFibGVEaWN0Q29yZSBmcm9tICcuL3RhYmxlL2NvcmUnO1xuaW1wb3J0IHsgSU9wdGlvbnMgYXMgSU9wdGlvbnNUYWJsZURpY3QsIFRhYmxlRGljdCB9IGZyb20gJy4vdGFibGUvZGljdCc7XG5cbmltcG9ydCBMb2FkZXIgZnJvbSAnLi9sb2FkZXInO1xuaW1wb3J0IHsgY3JsZiB9IGZyb20gJ2NybGYtbm9ybWFsaXplJztcbmltcG9ydCB7IFRhYmxlRGljdFN0b3B3b3JkIH0gZnJvbSAnLi90YWJsZS9zdG9wd29yZCc7XG5pbXBvcnQgVGFibGVEaWN0U3lub255bSBmcm9tICcuL3RhYmxlL3N5bm9ueW0nO1xuaW1wb3J0IFNlZ21lbnREaWN0IGZyb20gJ3NlZ21lbnQtZGljdCc7XG5pbXBvcnQgeyBJU3ViT3B0aW1pemVyLCBJU3ViVG9rZW5pemVyLCBPcHRpbWl6ZXIsIFRva2VuaXplciB9IGZyb20gJy4vbW9kJztcbmltcG9ydCB7IGRlYnVnVG9rZW4gfSBmcm9tICcuL3V0aWwvZGVidWcnO1xuaW1wb3J0IHsgSVdvcmREZWJ1ZyB9IGZyb20gJy4vdXRpbC9pbmRleCc7XG5cbmltcG9ydCBQcm9qZWN0Q29uZmlnIGZyb20gJy4uL3Byb2plY3QuY29uZmlnJztcblxuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UtcGx1cy9jb3JlJztcbmltcG9ydCB7IEVudW1EaWN0RGF0YWJhc2UgfSBmcm9tICcuL2NvbnN0JztcbmltcG9ydCB7IEVOVU1fU1VCTU9EUywgRU5VTV9TVUJNT0RTX05BTUUsIEVOVU1fU1VCTU9EU19PVEhFUiB9IGZyb20gJy4vbW9kL2luZGV4JztcblxuaW1wb3J0IHtcblx0SURJQ1QsXG5cdElESUNUMixcblx0SURJQ1RfQkxBQ0tMSVNULFxuXHRJRElDVF9TVE9QV09SRCxcblx0SURJQ1RfU1lOT05ZTSxcblx0SU9wdGlvbnNEb1NlZ21lbnQsXG5cdElPcHRpb25zU2VnbWVudCxcblx0SVNQTElULFxuXHRJU1BMSVRfRklMVEVSLFxuXHRJV29yZCxcbn0gZnJvbSAnLi9zZWdtZW50L3R5cGVzJztcbmltcG9ydCBTZWdtZW50Q29yZSBmcm9tICcuL3NlZ21lbnQvY29yZSc7XG5pbXBvcnQgeyBfaXNJZ25vcmVNb2R1bGVzIH0gZnJvbSAnLi9zZWdtZW50L21ldGhvZHMvdXNlTW9kdWxlcyc7XG5pbXBvcnQgeyBJVFNPdmVyd3JpdGUgfSBmcm9tICd0cy10eXBlJztcbmltcG9ydCB7IGRlZmF1bHRPcHRpb25zRG9TZWdtZW50IH0gZnJvbSAnLi9zZWdtZW50L2RlZmF1bHRzJztcbmltcG9ydCB7IHVzZURlZmF1bHQgfSBmcm9tICcuL2RlZmF1bHRzL2luZGV4JztcbmltcG9ydCB7IHVzZU1vZHVsZXMgfSBmcm9tICcuL3NlZ21lbnQvbWV0aG9kcy91c2VNb2R1bGVzMic7XG5cbi8qKlxuICog5Yib5bu65YiG6K+N5Zmo5o6l5Y+jXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWdtZW50IGV4dGVuZHMgU2VnbWVudENvcmVcbntcblxuXHRzdGF0aWMgZGVmYXVsdE9wdGlvbnNEb1NlZ21lbnQ6IElPcHRpb25zRG9TZWdtZW50ID0gZGVmYXVsdE9wdGlvbnNEb1NlZ21lbnQ7XG5cblx0Z2V0RGljdERhdGFiYXNlPFIgZXh0ZW5kcyBUYWJsZURpY3RTeW5vbnltPih0eXBlOiBFbnVtRGljdERhdGFiYXNlLlNZTk9OWU0sXG5cdFx0YXV0b2NyZWF0ZT86IGJvb2xlYW4sXG5cdFx0bGliVGFibGVEaWN0PzogeyBuZXcoLi4uYXJndik6IFIgfSxcblx0KTogUlxuXHRnZXREaWN0RGF0YWJhc2U8UiBleHRlbmRzIFRhYmxlRGljdD4odHlwZTogRW51bURpY3REYXRhYmFzZS5UQUJMRSxcblx0XHRhdXRvY3JlYXRlPzogYm9vbGVhbixcblx0XHRsaWJUYWJsZURpY3Q/OiB7IG5ldyguLi5hcmd2KTogUiB9LFxuXHQpOiBSXG5cdGdldERpY3REYXRhYmFzZTxSIGV4dGVuZHMgVGFibGVEaWN0U3RvcHdvcmQ+KHR5cGU6IEVudW1EaWN0RGF0YWJhc2UuU1RPUFdPUkQsXG5cdFx0YXV0b2NyZWF0ZT86IGJvb2xlYW4sXG5cdFx0bGliVGFibGVEaWN0PzogeyBuZXcoLi4uYXJndik6IFIgfSxcblx0KTogUlxuXHRnZXREaWN0RGF0YWJhc2U8UiBleHRlbmRzIFRhYmxlRGljdEJsYWNrbGlzdD4odHlwZTogRW51bURpY3REYXRhYmFzZS5CTEFDS0xJU1QsXG5cdFx0YXV0b2NyZWF0ZT86IGJvb2xlYW4sXG5cdFx0bGliVGFibGVEaWN0PzogeyBuZXcoLi4uYXJndik6IFIgfSxcblx0KTogUlxuXHRnZXREaWN0RGF0YWJhc2U8UiBleHRlbmRzIFRhYmxlRGljdEJsYWNrbGlzdD4odHlwZTogRW51bURpY3REYXRhYmFzZS5CTEFDS0xJU1RfRk9SX09QVElNSVpFUixcblx0XHRhdXRvY3JlYXRlPzogYm9vbGVhbixcblx0XHRsaWJUYWJsZURpY3Q/OiB7IG5ldyguLi5hcmd2KTogUiB9LFxuXHQpOiBSXG5cdGdldERpY3REYXRhYmFzZTxSIGV4dGVuZHMgQWJzdHJhY3RUYWJsZURpY3RDb3JlPGFueT4+KHR5cGU6IHN0cmluZyB8IEVudW1EaWN0RGF0YWJhc2UsXG5cdFx0YXV0b2NyZWF0ZT86IGJvb2xlYW4sXG5cdFx0bGliVGFibGVEaWN0PzogeyBuZXcoLi4uYXJndik6IFIgfSxcblx0KTogUlxuXHRnZXREaWN0RGF0YWJhc2UodHlwZTogc3RyaW5nLCBhdXRvY3JlYXRlPzogYm9vbGVhbiwgbGliVGFibGVEaWN0Pylcblx0e1xuXHRcdGlmICgoYXV0b2NyZWF0ZSB8fCB0aGlzLmluaXRlZCkgJiYgIXRoaXMuZGJbdHlwZV0pXG5cdFx0e1xuXHRcdFx0aWYgKHR5cGUgPT0gVGFibGVEaWN0U3lub255bS50eXBlKVxuXHRcdFx0e1xuXHRcdFx0XHRsaWJUYWJsZURpY3QgPSBsaWJUYWJsZURpY3QgfHwgVGFibGVEaWN0U3lub255bTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHR5cGUgPT0gVGFibGVEaWN0U3RvcHdvcmQudHlwZSlcblx0XHRcdHtcblx0XHRcdFx0bGliVGFibGVEaWN0ID0gbGliVGFibGVEaWN0IHx8IFRhYmxlRGljdFN0b3B3b3JkO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAodHlwZSA9PSBUYWJsZURpY3RCbGFja2xpc3QudHlwZSlcblx0XHRcdHtcblx0XHRcdFx0bGliVGFibGVEaWN0ID0gbGliVGFibGVEaWN0IHx8IFRhYmxlRGljdFN0b3B3b3JkO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRsaWJUYWJsZURpY3QgPSBsaWJUYWJsZURpY3QgfHwgVGFibGVEaWN0O1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRiW3R5cGVdID0gbmV3IGxpYlRhYmxlRGljdCh0eXBlLCB0aGlzLm9wdGlvbnMsIHtcblx0XHRcdFx0VEFCTEU6IHRoaXMuRElDVFt0eXBlXSxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmRiW3R5cGVdO1xuXHR9XG5cblx0LyoqXG5cdCAqIOi9veWFpeWIhuivjeaooeWdl1xuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ3xBcnJheXxPYmplY3R9IG1vZHVsZSDmqKHlnZflkI3np7Ao5pWw57uEKeaIluaooeWdl+WvueixoVxuXHQgKiBAcmV0dXJuIHtTZWdtZW50fVxuXHQgKi9cblx0dXNlKG1vZDogSVN1Yk9wdGltaXplciwgLi4uYXJndilcblx0dXNlKG1vZDogSVN1YlRva2VuaXplciwgLi4uYXJndilcblx0dXNlKG1vZDogQXJyYXk8SVN1YlRva2VuaXplciB8IElTdWJPcHRpbWl6ZXIgfCBzdHJpbmc+LCAuLi5hcmd2KVxuXHR1c2UobW9kOiBzdHJpbmcsIC4uLmFyZ3YpXG5cdHVzZShtb2QsIC4uLmFyZ3YpXG5cdHVzZShtb2QsIC4uLmFyZ3YpXG5cdHtcblx0XHR1c2VNb2R1bGVzKHRoaXMsIG1vZCwgLi4uYXJndik7XG5cblx0XHR0aGlzLmluaXRlZCA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdF9yZXNvbHZlRGljdEZpbGVuYW1lKG5hbWU6IHN0cmluZywgcGF0aFBsdXM6IHN0cmluZ1tdID0gW10sIGV4dFBsdXM6IHN0cmluZ1tdID0gW10pOiBzdHJpbmcgfCBzdHJpbmdbXVxuXHR7XG5cdFx0bGV0IG9wdGlvbnMgPSB7XG5cdFx0XHRwYXRoczogW1xuXHRcdFx0XHQnJyxcblx0XHRcdFx0UHJvamVjdENvbmZpZy5kaWN0X3Jvb3QsXG5cblx0XHRcdFx0Li4ucGF0aFBsdXMsXG5cdFx0XHRcdHBhdGgucmVzb2x2ZShTZWdtZW50RGljdC5ESUNUX1JPT1QsICdzZWdtZW50JyksXG5cdFx0XHRdLFxuXHRcdFx0ZXh0ZW5zaW9uczogW1xuXHRcdFx0XHQnJyxcblx0XHRcdFx0Li4uZXh0UGx1cyxcblx0XHRcdFx0Jy51dGY4Jyxcblx0XHRcdFx0Jy50eHQnLFxuXHRcdFx0XSxcblxuXHRcdFx0b25seUZpbGU6IHRydWUsXG5cdFx0fTtcblxuXHRcdGlmIChuYW1lLmluZGV4T2YoJyonKSAhPSAtMSlcblx0XHR7XG5cdFx0XHRsZXQgbHMgPSBzZWFyY2hHbG9iU3luYyhuYW1lLCBvcHRpb25zKTtcblxuXHRcdFx0aWYgKCFscyB8fCAhbHMubGVuZ3RoKVxuXHRcdFx0e1xuXHRcdFx0XHR0aHJvdyBFcnJvcihgQ2Fubm90IGZpbmQgZGljdCBnbG9iIGZpbGUgXCIke25hbWV9XCIuYCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBscztcblx0XHR9XG5cblx0XHRsZXQgZmlsZW5hbWUgPSBzZWFyY2hGaXJzdFN5bmMobmFtZSwgb3B0aW9ucyk7XG5cblx0XHRpZiAoIWZpbGVuYW1lKVxuXHRcdHtcblx0XHRcdC8vY29uc29sZS5sb2cobmFtZSwgcGF0aFBsdXMsIGV4dFBsdXMpO1xuXG5cdFx0XHR0aHJvdyBFcnJvcihgQ2Fubm90IGZpbmQgZGljdCBmaWxlIFwiJHtuYW1lfVwiLmApO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaWxlbmFtZTtcblx0fVxuXG5cdC8qKlxuXHQgKiDovb3lhaXlrZflhbjmlofku7Zcblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IG5hbWUg5a2X5YW45paH5Lu25ZCNXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIOexu+Wei1xuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGNvbnZlcnRfdG9fbG93ZXIg5piv5ZCm5YWo6YOo6L2s5o2i5Li65bCP5YaZXG5cdCAqIEByZXR1cm4ge1NlZ21lbnR9XG5cdCAqL1xuXHRsb2FkRGljdChuYW1lOiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcsIGNvbnZlcnRfdG9fbG93ZXI/OiBib29sZWFuLCBza2lwRXhpc3RzPzogYm9vbGVhbilcblx0e1xuXHRcdGxldCBmaWxlbmFtZSA9IHRoaXMuX3Jlc29sdmVEaWN0RmlsZW5hbWUobmFtZSk7XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShmaWxlbmFtZSkpXG5cdFx0e1xuXHRcdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRmaWxlbmFtZS5mb3JFYWNoKHYgPT4gdGhpcy5sb2FkRGljdCh2LCB0eXBlLCBjb252ZXJ0X3RvX2xvd2VyLCBza2lwRXhpc3RzKSk7XG5cblx0XHRcdC8vY29uc29sZS5sb2coZmlsZW5hbWUpO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIXR5cGUpIHR5cGUgPSAnVEFCTEUnOyAgICAgLy8g6buY6K6k5Li6VEFCTEVcblxuXHRcdGNvbnN0IGRiID0gdGhpcy5nZXREaWN0RGF0YWJhc2UodHlwZSwgdHJ1ZSk7XG5cblx0XHRjb25zdCBUQUJMRSA9IHRoaXMuRElDVFt0eXBlXSA9IGRiLlRBQkxFO1xuXHRcdGNvbnN0IFRBQkxFMiA9IHRoaXMuRElDVFt0eXBlICsgJzInXSA9IGRiLlRBQkxFMjtcblxuXHRcdC8qXG5cdFx0Ly8g5Yid5aeL5YyW6K+N5YW4XG5cdFx0aWYgKCF0aGlzLkRJQ1RbdHlwZV0pIHRoaXMuRElDVFt0eXBlXSA9IHt9O1xuXHRcdGlmICghdGhpcy5ESUNUW3R5cGUgKyAnMiddKSB0aGlzLkRJQ1RbdHlwZSArICcyJ10gPSB7fTtcblx0XHRsZXQgVEFCTEUgPSB0aGlzLkRJQ1RbdHlwZV07ICAgICAgICAvLyDor43lhbjooaggICfor40nID0+IHvlsZ7mgKd9XG5cdFx0bGV0IFRBQkxFMiA9IHRoaXMuRElDVFt0eXBlICsgJzInXTsgLy8g6K+N5YW46KGoICAn6ZW/5bqmJyA9PiAn6K+NJyA9PiDlsZ7mgKdcblx0XHQqL1xuXHRcdC8vIOWvvOWFpeaVsOaNrlxuXHRcdGNvbnN0IFBPU1RBRyA9IHRoaXMuUE9TVEFHO1xuXG5cdFx0bGV0IGRhdGEgPSBMb2FkZXIuU2VnbWVudERpY3RMb2FkZXIubG9hZFN5bmMoZmlsZW5hbWUpO1xuXG5cdFx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKVxuXHRcdHtcblx0XHRcdGlmIChjb252ZXJ0X3RvX2xvd2VyKVxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhWzBdID0gZGF0YVswXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRkYi5hZGQoZGF0YSwgc2tpcEV4aXN0cyk7XG5cblx0XHRcdC8qXG5cdFx0XHRsZXQgW3csIHAsIGZdID0gZGF0YTtcblxuXHRcdFx0aWYgKHcubGVuZ3RoID09IDApXG5cdFx0XHR7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcigpXG5cdFx0XHR9XG5cblx0XHRcdFRBQkxFW3ddID0geyBwLCBmLCB9O1xuXHRcdFx0aWYgKCFUQUJMRTJbdy5sZW5ndGhdKSBUQUJMRTJbdy5sZW5ndGhdID0ge307XG5cdFx0XHRUQUJMRTJbdy5sZW5ndGhdW3ddID0gVEFCTEVbd107XG5cdFx0XHQqL1xuXHRcdH0pO1xuXG5cdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblxuXHRcdHRoaXMuaW5pdGVkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIOi9veWFpeWQjOS5ieivjeivjeWFuFxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSDlrZflhbjmlofku7blkI1cblx0ICovXG5cdGxvYWRTeW5vbnltRGljdChuYW1lOiBzdHJpbmcsIHNraXBFeGlzdHM/OiBib29sZWFuKVxuXHR7XG5cdFx0bGV0IGZpbGVuYW1lID0gdGhpcy5fcmVzb2x2ZURpY3RGaWxlbmFtZShuYW1lLCBbXG5cdFx0XHRwYXRoLnJlc29sdmUoU2VnbWVudERpY3QuRElDVF9ST09ULCAnc3lub255bScpLFxuXHRcdF0pO1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoZmlsZW5hbWUpKVxuXHRcdHtcblx0XHRcdGxldCBzZWxmID0gdGhpcztcblxuXHRcdFx0ZmlsZW5hbWUuZm9yRWFjaCh2ID0+IHRoaXMubG9hZFN5bm9ueW1EaWN0KHYsIHNraXBFeGlzdHMpKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0bGV0IHR5cGUgPSAnU1lOT05ZTSc7XG5cblx0XHRjb25zdCBkYiA9IHRoaXMuZ2V0RGljdERhdGFiYXNlKHR5cGUsIHRydWUpO1xuXG5cdFx0Y29uc3QgVEFCTEUgPSB0aGlzLkRJQ1RbdHlwZV0gPSBkYi5UQUJMRTtcblxuXHRcdC8qXG5cdFx0Ly8g5Yid5aeL5YyW6K+N5YW4XG5cdFx0aWYgKCF0aGlzLkRJQ1RbdHlwZV0pIHRoaXMuRElDVFt0eXBlXSA9IHt9O1xuXHRcdC8vIOivjeWFuOihqCAgJ+WQjOS5ieivjScgPT4gJ+agh+WHhuivjSdcblx0XHRsZXQgVEFCTEUgPSB0aGlzLkRJQ1RbdHlwZV0gYXMgSURJQ1RfU1lOT05ZTTtcblx0XHQvLyDlr7zlhaXmlbDmja5cblx0XHQqL1xuXG5cdFx0bGV0IGRhdGEgPSBMb2FkZXIuU2VnbWVudFN5bm9ueW1Mb2FkZXIubG9hZFN5bmMoZmlsZW5hbWUpO1xuXG5cdFx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChibG9ja3M6IHN0cmluZ1tdKVxuXHRcdHtcblx0XHRcdGRiLmFkZChibG9ja3MsIHNraXBFeGlzdHMpO1xuXG5cdFx0XHQvKlxuXHRcdFx0bGV0IFtuMSwgbjJdID0gYmxvY2tzO1xuXG5cdFx0XHRUQUJMRVtuMV0gPSBuMjtcblx0XHRcdGlmIChUQUJMRVtuMl0gPT09IG4xKVxuXHRcdFx0e1xuXHRcdFx0XHRkZWxldGUgVEFCTEVbbjJdO1xuXHRcdFx0fVxuXHRcdFx0Ki9cblx0XHR9KTtcblxuXHRcdC8vY29uc29sZS5sb2coVEFCTEUpO1xuXG5cdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblxuXHRcdHRoaXMuaW5pdGVkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9sb2FkQmxhY2tsaXN0RGljdChuYW1lOiBzdHJpbmcsIHR5cGU6IEVudW1EaWN0RGF0YWJhc2UpXG5cdHtcblx0XHRsZXQgZmlsZW5hbWUgPSB0aGlzLl9yZXNvbHZlRGljdEZpbGVuYW1lKG5hbWUsIFtcblx0XHRcdHBhdGgucmVzb2x2ZShTZWdtZW50RGljdC5ESUNUX1JPT1QsICdibGFja2xpc3QnKSxcblx0XHRdKTtcblxuXHRcdGlmIChBcnJheS5pc0FycmF5KGZpbGVuYW1lKSlcblx0XHR7XG5cdFx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHRcdGZpbGVuYW1lLmZvckVhY2godiA9PiB0aGlzLl9sb2FkQmxhY2tsaXN0RGljdCh2LCB0eXBlKSk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRiID0gdGhpcy5nZXREaWN0RGF0YWJhc2UodHlwZSwgdHJ1ZSk7XG5cblx0XHRjb25zdCBUQUJMRSA9IHRoaXMuRElDVFt0eXBlXSA9IGRiLlRBQkxFO1xuXG5cdFx0bGV0IGRhdGEgPSBMb2FkZXIuU2VnbWVudERpY3Rcblx0XHRcdC5yZXF1aXJlTG9hZGVyTW9kdWxlKCdsaW5lJylcblx0XHRcdC5sb2FkU3luYyhmaWxlbmFtZSwge1xuXHRcdFx0XHRmaWx0ZXIobGluZTogc3RyaW5nKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIGxpbmUudHJpbSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSlcblx0XHQ7XG5cblx0XHRkYXRhLmZvckVhY2godiA9PiBkYi5hZGQodikpO1xuXG5cdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblxuXHRcdHRoaXMuaW5pdGVkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0bG9hZEJsYWNrbGlzdERpY3QobmFtZTogc3RyaW5nKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2xvYWRCbGFja2xpc3REaWN0KG5hbWUsIEVudW1EaWN0RGF0YWJhc2UuQkxBQ0tMSVNUKVxuXHR9XG5cblx0bG9hZEJsYWNrbGlzdE9wdGltaXplckRpY3QobmFtZTogc3RyaW5nKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2xvYWRCbGFja2xpc3REaWN0KG5hbWUsIEVudW1EaWN0RGF0YWJhc2UuQkxBQ0tMSVNUX0ZPUl9PUFRJTUlaRVIpXG5cdH1cblxuXHQvKipcblx0ICog6L295YWl5YGc5q2i56ym6K+N5YW4XG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIOWtl+WFuOaWh+S7tuWQjVxuXHQgKi9cblx0bG9hZFN0b3B3b3JkRGljdChuYW1lOiBzdHJpbmcpXG5cdHtcblx0XHRsZXQgZmlsZW5hbWUgPSB0aGlzLl9yZXNvbHZlRGljdEZpbGVuYW1lKG5hbWUsIFtcblx0XHRcdHBhdGgucmVzb2x2ZShTZWdtZW50RGljdC5ESUNUX1JPT1QsICdzdG9wd29yZCcpLFxuXHRcdF0pO1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoZmlsZW5hbWUpKVxuXHRcdHtcblx0XHRcdGxldCBzZWxmID0gdGhpcztcblxuXHRcdFx0ZmlsZW5hbWUuZm9yRWFjaCh2ID0+IHRoaXMubG9hZFN0b3B3b3JkRGljdCh2KSk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGNvbnN0IHR5cGUgPSBFbnVtRGljdERhdGFiYXNlLlNUT1BXT1JEO1xuXG5cdFx0Y29uc3QgZGIgPSB0aGlzLmdldERpY3REYXRhYmFzZSh0eXBlLCB0cnVlKTtcblxuXHRcdGNvbnN0IFRBQkxFID0gdGhpcy5ESUNUW3R5cGVdID0gZGIuVEFCTEU7XG5cblx0XHRsZXQgZGF0YSA9IExvYWRlci5TZWdtZW50RGljdFxuXHRcdFx0LnJlcXVpcmVMb2FkZXJNb2R1bGUoJ2xpbmUnKVxuXHRcdFx0LmxvYWRTeW5jKGZpbGVuYW1lLCB7XG5cdFx0XHRcdGZpbHRlcihsaW5lOiBzdHJpbmcpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXR1cm4gbGluZS50cmltKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9KVxuXHRcdDtcblxuXHRcdGRhdGEuZm9yRWFjaCh2ID0+IGRiLmFkZCh2KSk7XG5cblx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXG5cdFx0dGhpcy5pbml0ZWQgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICog5L2/55So6buY6K6k55qE6K+G5Yir5qih5Z2X5ZKM5a2X5YW45paH5Lu2XG5cdCAqIOWcqOS9v+eUqOmgkOioreWAvOeahOaDheazgeS4i++8jOS4jemcgOimgeS4u+WLleWRvOWPq+atpOWHveaVuFxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTZWdtZW50fVxuXHQgKi9cblx0dXNlRGVmYXVsdCguLi5hcmd2KVxuXHR7XG5cdFx0dXNlRGVmYXVsdCh0aGlzLCAuLi5hcmd2KTtcblxuXHRcdHRoaXMuaW5pdGVkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIOatpOWHveaVuOWPqumcgOWft+ihjOS4gOasoe+8jOS4puS4lOS4gOiIrOeLgOazgeS4i+S4jemcgOimgeaJi+WLleWRvOWPq1xuXHQgKi9cblx0YXV0b0luaXQob3B0aW9ucz86IHtcblx0XHRhbGxfbW9kPzogYm9vbGVhbixcblx0fSlcblx0e1xuXHRcdGlmICghdGhpcy5pbml0ZWQpXG5cdFx0e1xuXHRcdFx0dGhpcy5pbml0ZWQgPSB0cnVlO1xuXG5cdFx0XHRpZiAoIXRoaXMubW9kdWxlcy50b2tlbml6ZXIubGVuZ3RoKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLnVzZURlZmF1bHQob3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRhZGRCbGFja2xpc3Qod29yZDogc3RyaW5nLCByZW1vdmU/OiBib29sZWFuKVxuXHR7XG5cdFx0bGV0IG1lID0gdGhpcztcblxuXHRcdHRoaXMuYXV0b0luaXQodGhpcy5vcHRpb25zKTtcblxuXHRcdGNvbnN0IEJMQUNLTElTVCA9IG1lLmdldERpY3REYXRhYmFzZShFbnVtRGljdERhdGFiYXNlLkJMQUNLTElTVCk7XG5cdFx0Y29uc3QgVEFCTEUgPSBtZS5nZXREaWN0RGF0YWJhc2UoRW51bURpY3REYXRhYmFzZS5UQUJMRSk7XG5cblx0XHRsZXQgYm9vbCA9ICFyZW1vdmU7XG5cblx0XHRpZiAoYm9vbClcblx0XHR7XG5cdFx0XHRCTEFDS0xJU1QuYWRkKHdvcmQpO1xuXHRcdFx0VEFCTEUucmVtb3ZlKHdvcmQpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0QkxBQ0tMSVNULnJlbW92ZSh3b3JkKVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzXG5cdH1cblxuXHQvKipcblx0ICogcmVtb3ZlIGtleSBpbiBUQUJMRSBieSBCTEFDS0xJU1Rcblx0ICovXG5cdGRvQmxhY2tsaXN0KClcblx0e1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cblx0XHR0aGlzLmF1dG9Jbml0KHRoaXMub3B0aW9ucyk7XG5cblx0XHRjb25zdCBCTEFDS0xJU1QgPSBtZS5nZXREaWN0KEVudW1EaWN0RGF0YWJhc2UuQkxBQ0tMSVNUKTtcblx0XHRjb25zdCBUQUJMRSA9IG1lLmdldERpY3REYXRhYmFzZShFbnVtRGljdERhdGFiYXNlLlRBQkxFKTtcblxuXHRcdE9iamVjdC5lbnRyaWVzKEJMQUNLTElTVClcblx0XHRcdC5mb3JFYWNoKGZ1bmN0aW9uIChba2V5LCBib29sXSlcblx0XHRcdHtcblx0XHRcdFx0Ym9vbCAmJiBUQUJMRS5yZW1vdmUoa2V5KVxuXHRcdFx0fSlcblx0XHQ7XG5cblx0XHRyZXR1cm4gdGhpc1xuXHR9XG5cblx0LyoqXG5cdCAqIOW8gOWni+WIhuivjVxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCDmlofmnKxcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMg6YCJ6aG5XG5cdCAqICAgLSB7Qm9vbGVhbn0gc2ltcGxlIOaYr+WQpuS7hei/lOWbnuWNleivjeWGheWuuVxuXHQgKiAgIC0ge0Jvb2xlYW59IHN0cmlwUHVuY3R1YXRpb24g5Y676Zmk5qCH54K556ym5Y+3XG5cdCAqICAgLSB7Qm9vbGVhbn0gY29udmVydFN5bm9ueW0g6L2s5o2i5ZCM5LmJ6K+NXG5cdCAqICAgLSB7Qm9vbGVhbn0gc3RyaXBTdG9wd29yZCDljrvpmaTlgZzmraLnrKZcblx0ICogQHJldHVybiB7QXJyYXl9XG5cdCAqL1xuXHRkb1NlZ21lbnQodGV4dDogc3RyaW5nIHwgQnVmZmVyLCBvcHRpb25zOiBJVFNPdmVyd3JpdGU8SU9wdGlvbnNEb1NlZ21lbnQsIHtcblx0XHRzaW1wbGU6IHRydWUsXG5cdH0+KTogc3RyaW5nW11cblx0ZG9TZWdtZW50KHRleHQ6IHN0cmluZyB8IEJ1ZmZlciwgb3B0aW9ucz86IElPcHRpb25zRG9TZWdtZW50KTogSVdvcmRbXVxuXHRkb1NlZ21lbnQodGV4dCwgb3B0aW9uczogSU9wdGlvbnNEb1NlZ21lbnQgPSB7fSlcblx0e1xuXHRcdHRoaXMuYXV0b0luaXQodGhpcy5vcHRpb25zKTtcblxuXHRcdHJldHVybiBzdXBlci5kb1NlZ21lbnQodGV4dCwgb3B0aW9ucykgYXMgYW55XG5cdH1cblxufVxuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgU2VnbWVudFxue1xuXHRleHBvcnQge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRJRElDVCxcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0SURJQ1QyLFxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRJRElDVF9CTEFDS0xJU1QsXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdElESUNUX1NUT1BXT1JELFxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRJRElDVF9TWU5PTllNLFxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRJT3B0aW9uc0RvU2VnbWVudCxcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0SU9wdGlvbnNTZWdtZW50LFxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRJU1BMSVQsXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdElTUExJVF9GSUxURVIsXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdElXb3JkLFxuXHR9XG59XG5cbmV4cG9ydCB7XG5cdElESUNULFxuXHRJRElDVDIsXG5cdElESUNUX0JMQUNLTElTVCxcblx0SURJQ1RfU1RPUFdPUkQsXG5cdElESUNUX1NZTk9OWU0sXG5cdElPcHRpb25zRG9TZWdtZW50LFxuXHRJT3B0aW9uc1NlZ21lbnQsXG5cdElTUExJVCxcblx0SVNQTElUX0ZJTFRFUixcblx0SVdvcmQsXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlZ21lbnQ7XG4iXX0=