"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("deepmerge-plus/core");
const debug_1 = require("../../util/debug");
function convertSynonym(ret, options) {
    const { showcount, POSTAG, DICT_SYNONYM, DICT_TABLE } = options;
    let total_count = 0;
    //const RAW = Symbol.for('RAW');
    // 转换同义词
    function _convertSynonym(list) {
        let count = 0;
        list = list.reduce(function (a, item) {
            let bool;
            let w = item.w;
            let nw;
            let debug = debug_1.debugToken(item);
            if (w in DICT_SYNONYM) {
                bool = true;
                nw = DICT_SYNONYM[w];
            }
            else if (debug.autoCreate && !debug.convertSynonym && !item.ow && item.m && item.m.length) {
                nw = item.m.reduce(function (a, b) {
                    if (typeof b == 'string') {
                        a.push(b);
                    }
                    else if (b.w in DICT_SYNONYM) {
                        a.push(DICT_SYNONYM[b.w]);
                        bool = true;
                    }
                    else {
                        a.push(b.w);
                    }
                    return a;
                }, []).join('');
            }
            if (bool) {
                count++;
                total_count++;
                //return { w: DICT_SYNONYM[item.w], p: item.p };
                let p = item.p;
                if (w in DICT_TABLE) {
                    p = DICT_TABLE[w].p || p;
                }
                if (p & POSTAG.BAD) {
                    p = p ^ POSTAG.BAD;
                }
                let item_new = debug_1.debugToken({
                    ...item,
                    w: nw,
                    ow: w,
                    p,
                    op: item.p,
                }, {
                    convertSynonym: true,
                    //_source: item,
                    /**
                     * JSON.stringify
                     * avoid TypeError: Converting circular structure to JSON
                     */
                    _source: core_1.default({}, item),
                }, true);
                a.push(item_new);
            }
            else {
                a.push(item);
            }
            return a;
        }, []);
        return { count: count, list: list };
    }
    let result;
    do {
        result = _convertSynonym(ret);
        ret = result.list;
    } while (result.count > 0);
    if (showcount) {
        return { count: total_count, list: ret };
    }
    return ret;
}
exports.convertSynonym = convertSynonym;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydFN5bm9ueW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb252ZXJ0U3lub255bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUE0QztBQUM1Qyw0Q0FBMEQ7QUFtQzFELFNBQWdCLGNBQWMsQ0FBQyxHQUFpQixFQUFFLE9BQWlCO0lBRWxFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFFaEUsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLGdDQUFnQztJQUVoQyxRQUFRO0lBQ1IsU0FBUyxlQUFlLENBQUMsSUFBa0I7UUFFMUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBZ0I7WUFFL0MsSUFBSSxJQUFhLENBQUM7WUFDbEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksRUFBVSxDQUFDO1lBRWYsSUFBSSxLQUFLLEdBQUcsa0JBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU3QixJQUFJLENBQUMsSUFBSSxZQUFZLEVBQ3JCO2dCQUNDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ1osRUFBRSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtpQkFDSSxJQUFJLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUN6RjtnQkFDQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFXLEVBQUUsQ0FBQztvQkFFMUMsSUFBSSxPQUFPLENBQUMsSUFBSSxRQUFRLEVBQ3hCO3dCQUNDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ1Y7eUJBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLFlBQVksRUFDNUI7d0JBQ0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzFCLElBQUksR0FBRyxJQUFJLENBQUM7cUJBQ1o7eUJBRUQ7d0JBQ0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ1o7b0JBRUQsT0FBTyxDQUFDLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNoQjtZQUVELElBQUksSUFBSSxFQUNSO2dCQUNDLEtBQUssRUFBRSxDQUFDO2dCQUNSLFdBQVcsRUFBRSxDQUFDO2dCQUNkLGdEQUFnRDtnQkFFaEQsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFFZixJQUFJLENBQUMsSUFBSSxVQUFVLEVBQ25CO29CQUNDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDekI7Z0JBRUQsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFDbEI7b0JBQ0MsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNuQjtnQkFFRCxJQUFJLFFBQVEsR0FBRyxrQkFBVSxDQUFDO29CQUN6QixHQUFHLElBQUk7b0JBRVAsQ0FBQyxFQUFFLEVBQUU7b0JBQ0wsRUFBRSxFQUFFLENBQUM7b0JBQ0wsQ0FBQztvQkFDRCxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBS1YsRUFBRTtvQkFDRixjQUFjLEVBQUUsSUFBSTtvQkFDcEIsZ0JBQWdCO29CQUVoQjs7O3VCQUdHO29CQUNILE9BQU8sRUFBRSxjQUFTLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBZTtpQkFFMUMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFFVCxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2pCO2lCQUVEO2dCQUNDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDYjtZQUVELE9BQU8sQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxFQUFFLEVBQWtCLENBQUMsQ0FBQztRQUN2QixPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFrQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFJLE1BQW9DLENBQUM7SUFDekMsR0FDQTtRQUNDLE1BQU0sR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7S0FDbEIsUUFDTSxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtJQUV6QixJQUFJLFNBQVMsRUFDYjtRQUNDLE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztLQUN6QztJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ1osQ0FBQztBQWxIRCx3Q0FrSEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZS1wbHVzL2NvcmUnO1xuaW1wb3J0IHsgZGVidWdUb2tlbiwgSVdvcmREZWJ1ZyB9IGZyb20gJy4uLy4uL3V0aWwvZGVidWcnO1xuaW1wb3J0IHsgSURJQ1QsIElESUNUX1NZTk9OWU0sIElXb3JkIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IFBPU1RBRyBmcm9tICcuLi8uLi9QT1NUQUcnO1xuaW1wb3J0IHsgSVRTT3ZlcndyaXRlIH0gZnJvbSAndHMtdHlwZSc7XG5cbmludGVyZmFjZSBJT3B0aW9uc1xue1xuXHQvKipcblx0ICogZm9yIGRlYnVnXG5cdCAqL1xuXHRzaG93Y291bnQ/OiBib29sZWFuLFxuXHRESUNUX1NZTk9OWU06IElESUNUX1NZTk9OWU0sXG5cdERJQ1RfVEFCTEU6IElESUNUPElXb3JkPixcblx0UE9TVEFHOiB0eXBlb2YgUE9TVEFHLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDb252ZXJ0U3lub255bVdpdGhTaG93Y291bnRcbntcblx0Y291bnQ6IG51bWJlcixcblx0bGlzdDogSVdvcmREZWJ1Z1tdLFxufVxuXG4vKipcbiAqIOi9rOaNouWQjOS5ieivjVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFN5bm9ueW0ocmV0OiBJV29yZERlYnVnW10sIG9wdGlvbnM6IElUU092ZXJ3cml0ZTxJT3B0aW9ucywge1xuXHRzaG93Y291bnQ6IHRydWUsXG59Pik6IHtcblx0Y291bnQ6IG51bWJlcixcblx0bGlzdDogSVdvcmREZWJ1Z1tdLFxufVxuLyoqXG4gKiDovazmjaLlkIzkuYnor41cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRTeW5vbnltKHJldDogSVdvcmREZWJ1Z1tdLCBvcHRpb25zPzogSU9wdGlvbnMpOiBJV29yZERlYnVnW11cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0U3lub255bShyZXQ6IElXb3JkRGVidWdbXSwgb3B0aW9uczogSU9wdGlvbnMpXG57XG5cdGNvbnN0IHsgc2hvd2NvdW50LCBQT1NUQUcsIERJQ1RfU1lOT05ZTSwgRElDVF9UQUJMRSB9ID0gb3B0aW9ucztcblxuXHRsZXQgdG90YWxfY291bnQgPSAwO1xuXG5cdC8vY29uc3QgUkFXID0gU3ltYm9sLmZvcignUkFXJyk7XG5cblx0Ly8g6L2s5o2i5ZCM5LmJ6K+NXG5cdGZ1bmN0aW9uIF9jb252ZXJ0U3lub255bShsaXN0OiBJV29yZERlYnVnW10pXG5cdHtcblx0XHRsZXQgY291bnQgPSAwO1xuXHRcdGxpc3QgPSBsaXN0LnJlZHVjZShmdW5jdGlvbiAoYSwgaXRlbTogSVdvcmREZWJ1Zylcblx0XHR7XG5cdFx0XHRsZXQgYm9vbDogYm9vbGVhbjtcblx0XHRcdGxldCB3ID0gaXRlbS53O1xuXHRcdFx0bGV0IG53OiBzdHJpbmc7XG5cblx0XHRcdGxldCBkZWJ1ZyA9IGRlYnVnVG9rZW4oaXRlbSk7XG5cblx0XHRcdGlmICh3IGluIERJQ1RfU1lOT05ZTSlcblx0XHRcdHtcblx0XHRcdFx0Ym9vbCA9IHRydWU7XG5cdFx0XHRcdG53ID0gRElDVF9TWU5PTllNW3ddO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoZGVidWcuYXV0b0NyZWF0ZSAmJiAhZGVidWcuY29udmVydFN5bm9ueW0gJiYgIWl0ZW0ub3cgJiYgaXRlbS5tICYmIGl0ZW0ubS5sZW5ndGgpXG5cdFx0XHR7XG5cdFx0XHRcdG53ID0gaXRlbS5tLnJlZHVjZShmdW5jdGlvbiAoYTogc3RyaW5nW10sIGIpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGIgPT0gJ3N0cmluZycpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YS5wdXNoKGIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmIChiLncgaW4gRElDVF9TWU5PTllNKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGEucHVzaChESUNUX1NZTk9OWU1bYi53XSk7XG5cdFx0XHRcdFx0XHRib29sID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGEucHVzaChiLncpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBhO1xuXHRcdFx0XHR9LCBbXSkuam9pbignJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChib29sKVxuXHRcdFx0e1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0b3RhbF9jb3VudCsrO1xuXHRcdFx0XHQvL3JldHVybiB7IHc6IERJQ1RfU1lOT05ZTVtpdGVtLnddLCBwOiBpdGVtLnAgfTtcblxuXHRcdFx0XHRsZXQgcCA9IGl0ZW0ucDtcblxuXHRcdFx0XHRpZiAodyBpbiBESUNUX1RBQkxFKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cCA9IERJQ1RfVEFCTEVbd10ucCB8fCBwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHAgJiBQT1NUQUcuQkFEKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cCA9IHAgXiBQT1NUQUcuQkFEO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IGl0ZW1fbmV3ID0gZGVidWdUb2tlbih7XG5cdFx0XHRcdFx0Li4uaXRlbSxcblxuXHRcdFx0XHRcdHc6IG53LFxuXHRcdFx0XHRcdG93OiB3LFxuXHRcdFx0XHRcdHAsXG5cdFx0XHRcdFx0b3A6IGl0ZW0ucCxcblxuXHRcdFx0XHRcdC8vW1JBV106IGl0ZW0sXG5cblx0XHRcdFx0XHQvL3NvdXJjZTogaXRlbSxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGNvbnZlcnRTeW5vbnltOiB0cnVlLFxuXHRcdFx0XHRcdC8vX3NvdXJjZTogaXRlbSxcblxuXHRcdFx0XHRcdC8qKlxuXHRcdFx0XHRcdCAqIEpTT04uc3RyaW5naWZ5XG5cdFx0XHRcdFx0ICogYXZvaWQgVHlwZUVycm9yOiBDb252ZXJ0aW5nIGNpcmN1bGFyIHN0cnVjdHVyZSB0byBKU09OXG5cdFx0XHRcdFx0ICovXG5cdFx0XHRcdFx0X3NvdXJjZTogZGVlcG1lcmdlKHt9LCBpdGVtKSBhcyBJV29yZERlYnVnLFxuXG5cdFx0XHRcdH0sIHRydWUpO1xuXG5cdFx0XHRcdGEucHVzaChpdGVtX25ldyk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGEucHVzaChpdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fSwgW10gYXMgSVdvcmREZWJ1Z1tdKTtcblx0XHRyZXR1cm4geyBjb3VudDogY291bnQsIGxpc3Q6IGxpc3QgfSBhcyBJQ29udmVydFN5bm9ueW1XaXRoU2hvd2NvdW50O1xuXHR9XG5cblx0bGV0IHJlc3VsdDogSUNvbnZlcnRTeW5vbnltV2l0aFNob3djb3VudDtcblx0ZG9cblx0e1xuXHRcdHJlc3VsdCA9IF9jb252ZXJ0U3lub255bShyZXQpO1xuXHRcdHJldCA9IHJlc3VsdC5saXN0O1xuXHR9XG5cdHdoaWxlIChyZXN1bHQuY291bnQgPiAwKTtcblxuXHRpZiAoc2hvd2NvdW50KVxuXHR7XG5cdFx0cmV0dXJuIHsgY291bnQ6IHRvdGFsX2NvdW50LCBsaXN0OiByZXQgfTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG4iXX0=