"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertSynonym = void 0;
const core_1 = require("deepmerge-plus/core");
const debug_1 = require("../../util/debug");
function convertSynonym(ret, options) {
    const { showcount, POSTAG, DICT_SYNONYM, DICT_TABLE } = options;
    let total_count = 0;
    //const RAW = Symbol.for('RAW');
    // 转换同义词
    function _convertSynonym(list) {
        let count = 0;
        list = list.reduce(function (a, item) {
            let bool;
            let w = item.w;
            let nw;
            let debug = debug_1.debugToken(item);
            if (w in DICT_SYNONYM) {
                bool = true;
                nw = DICT_SYNONYM[w];
            }
            else if (debug.autoCreate && !debug.convertSynonym && !item.ow && item.m && item.m.length) {
                nw = item.m.reduce(function (a, b) {
                    if (typeof b == 'string') {
                        a.push(b);
                    }
                    else if (b.w in DICT_SYNONYM) {
                        a.push(DICT_SYNONYM[b.w]);
                        bool = true;
                    }
                    else {
                        a.push(b.w);
                    }
                    return a;
                }, []).join('');
            }
            if (bool) {
                count++;
                total_count++;
                //return { w: DICT_SYNONYM[item.w], p: item.p };
                let p = item.p;
                if (w in DICT_TABLE) {
                    p = DICT_TABLE[w].p || p;
                }
                if (p & POSTAG.BAD) {
                    p = p ^ POSTAG.BAD;
                }
                let item_new = debug_1.debugToken({
                    ...item,
                    w: nw,
                    ow: w,
                    p,
                    op: item.p,
                }, {
                    convertSynonym: true,
                    //_source: item,
                    /**
                     * JSON.stringify
                     * avoid TypeError: Converting circular structure to JSON
                     */
                    _source: core_1.default({}, item),
                }, true);
                a.push(item_new);
            }
            else {
                a.push(item);
            }
            debug = undefined;
            return a;
        }, []);
        return { count: count, list: list };
    }
    let result;
    do {
        result = _convertSynonym(ret);
        ret = result.list;
        result.list = undefined;
    } while (result.count > 0);
    result = undefined;
    if (showcount) {
        return { count: total_count, list: ret };
    }
    return ret;
}
exports.convertSynonym = convertSynonym;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydFN5bm9ueW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb252ZXJ0U3lub255bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBNEM7QUFDNUMsNENBQTBEO0FBbUMxRCxTQUFnQixjQUFjLENBQUMsR0FBaUIsRUFBRSxPQUFpQjtJQUVsRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBRWhFLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUVwQixnQ0FBZ0M7SUFFaEMsUUFBUTtJQUNSLFNBQVMsZUFBZSxDQUFDLElBQWtCO1FBRTFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQWdCO1lBRS9DLElBQUksSUFBYSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJLEVBQVUsQ0FBQztZQUVmLElBQUksS0FBSyxHQUFHLGtCQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFN0IsSUFBSSxDQUFDLElBQUksWUFBWSxFQUNyQjtnQkFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUNaLEVBQUUsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckI7aUJBQ0ksSUFBSSxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFDekY7Z0JBQ0MsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBVyxFQUFFLENBQUM7b0JBRTFDLElBQUksT0FBTyxDQUFDLElBQUksUUFBUSxFQUN4Qjt3QkFDQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNWO3lCQUNJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxZQUFZLEVBQzVCO3dCQUNDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMxQixJQUFJLEdBQUcsSUFBSSxDQUFDO3FCQUNaO3lCQUVEO3dCQUNDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNaO29CQUVELE9BQU8sQ0FBQyxDQUFDO2dCQUNWLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDaEI7WUFFRCxJQUFJLElBQUksRUFDUjtnQkFDQyxLQUFLLEVBQUUsQ0FBQztnQkFDUixXQUFXLEVBQUUsQ0FBQztnQkFDZCxnREFBZ0Q7Z0JBRWhELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBRWYsSUFBSSxDQUFDLElBQUksVUFBVSxFQUNuQjtvQkFDQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3pCO2dCQUVELElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQ2xCO29CQUNDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDbkI7Z0JBRUQsSUFBSSxRQUFRLEdBQUcsa0JBQVUsQ0FBQztvQkFDekIsR0FBRyxJQUFJO29CQUVQLENBQUMsRUFBRSxFQUFFO29CQUNMLEVBQUUsRUFBRSxDQUFDO29CQUNMLENBQUM7b0JBQ0QsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO2lCQUtWLEVBQUU7b0JBQ0YsY0FBYyxFQUFFLElBQUk7b0JBQ3BCLGdCQUFnQjtvQkFFaEI7Ozt1QkFHRztvQkFDSCxPQUFPLEVBQUUsY0FBUyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQWU7aUJBRTFDLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRVQsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqQjtpQkFFRDtnQkFDQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2I7WUFFRCxLQUFLLEdBQUcsU0FBUyxDQUFDO1lBRWxCLE9BQU8sQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxFQUFFLEVBQWtCLENBQUMsQ0FBQztRQUN2QixPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFrQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFJLE1BQW9DLENBQUM7SUFDekMsR0FDQTtRQUNDLE1BQU0sR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFFbEIsTUFBTSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7S0FDeEIsUUFDTSxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtJQUV6QixNQUFNLEdBQUcsU0FBUyxDQUFDO0lBRW5CLElBQUksU0FBUyxFQUNiO1FBQ0MsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBeEhELHdDQXdIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlLXBsdXMvY29yZSc7XG5pbXBvcnQgeyBkZWJ1Z1Rva2VuLCBJV29yZERlYnVnIH0gZnJvbSAnLi4vLi4vdXRpbC9kZWJ1Zyc7XG5pbXBvcnQgeyBJRElDVCwgSURJQ1RfU1lOT05ZTSwgSVdvcmQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgUE9TVEFHIGZyb20gJy4uLy4uL1BPU1RBRyc7XG5pbXBvcnQgeyBJVFNPdmVyd3JpdGUgfSBmcm9tICd0cy10eXBlJztcblxuaW50ZXJmYWNlIElPcHRpb25zXG57XG5cdC8qKlxuXHQgKiBmb3IgZGVidWdcblx0ICovXG5cdHNob3djb3VudD86IGJvb2xlYW4sXG5cdERJQ1RfU1lOT05ZTTogSURJQ1RfU1lOT05ZTSxcblx0RElDVF9UQUJMRTogSURJQ1Q8SVdvcmQ+LFxuXHRQT1NUQUc6IHR5cGVvZiBQT1NUQUcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbnZlcnRTeW5vbnltV2l0aFNob3djb3VudFxue1xuXHRjb3VudDogbnVtYmVyLFxuXHRsaXN0OiBJV29yZERlYnVnW10sXG59XG5cbi8qKlxuICog6L2s5o2i5ZCM5LmJ6K+NXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0U3lub255bShyZXQ6IElXb3JkRGVidWdbXSwgb3B0aW9uczogSVRTT3ZlcndyaXRlPElPcHRpb25zLCB7XG5cdHNob3djb3VudDogdHJ1ZSxcbn0+KToge1xuXHRjb3VudDogbnVtYmVyLFxuXHRsaXN0OiBJV29yZERlYnVnW10sXG59XG4vKipcbiAqIOi9rOaNouWQjOS5ieivjVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFN5bm9ueW0ocmV0OiBJV29yZERlYnVnW10sIG9wdGlvbnM/OiBJT3B0aW9ucyk6IElXb3JkRGVidWdbXVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRTeW5vbnltKHJldDogSVdvcmREZWJ1Z1tdLCBvcHRpb25zOiBJT3B0aW9ucylcbntcblx0Y29uc3QgeyBzaG93Y291bnQsIFBPU1RBRywgRElDVF9TWU5PTllNLCBESUNUX1RBQkxFIH0gPSBvcHRpb25zO1xuXG5cdGxldCB0b3RhbF9jb3VudCA9IDA7XG5cblx0Ly9jb25zdCBSQVcgPSBTeW1ib2wuZm9yKCdSQVcnKTtcblxuXHQvLyDovazmjaLlkIzkuYnor41cblx0ZnVuY3Rpb24gX2NvbnZlcnRTeW5vbnltKGxpc3Q6IElXb3JkRGVidWdbXSlcblx0e1xuXHRcdGxldCBjb3VudCA9IDA7XG5cdFx0bGlzdCA9IGxpc3QucmVkdWNlKGZ1bmN0aW9uIChhLCBpdGVtOiBJV29yZERlYnVnKVxuXHRcdHtcblx0XHRcdGxldCBib29sOiBib29sZWFuO1xuXHRcdFx0bGV0IHcgPSBpdGVtLnc7XG5cdFx0XHRsZXQgbnc6IHN0cmluZztcblxuXHRcdFx0bGV0IGRlYnVnID0gZGVidWdUb2tlbihpdGVtKTtcblxuXHRcdFx0aWYgKHcgaW4gRElDVF9TWU5PTllNKVxuXHRcdFx0e1xuXHRcdFx0XHRib29sID0gdHJ1ZTtcblx0XHRcdFx0bncgPSBESUNUX1NZTk9OWU1bd107XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChkZWJ1Zy5hdXRvQ3JlYXRlICYmICFkZWJ1Zy5jb252ZXJ0U3lub255bSAmJiAhaXRlbS5vdyAmJiBpdGVtLm0gJiYgaXRlbS5tLmxlbmd0aClcblx0XHRcdHtcblx0XHRcdFx0bncgPSBpdGVtLm0ucmVkdWNlKGZ1bmN0aW9uIChhOiBzdHJpbmdbXSwgYilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgYiA9PSAnc3RyaW5nJylcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRhLnB1c2goYik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKGIudyBpbiBESUNUX1NZTk9OWU0pXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YS5wdXNoKERJQ1RfU1lOT05ZTVtiLnddKTtcblx0XHRcdFx0XHRcdGJvb2wgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YS5wdXNoKGIudyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGE7XG5cdFx0XHRcdH0sIFtdKS5qb2luKCcnKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGJvb2wpXG5cdFx0XHR7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRvdGFsX2NvdW50Kys7XG5cdFx0XHRcdC8vcmV0dXJuIHsgdzogRElDVF9TWU5PTllNW2l0ZW0ud10sIHA6IGl0ZW0ucCB9O1xuXG5cdFx0XHRcdGxldCBwID0gaXRlbS5wO1xuXG5cdFx0XHRcdGlmICh3IGluIERJQ1RfVEFCTEUpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwID0gRElDVF9UQUJMRVt3XS5wIHx8IHA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocCAmIFBPU1RBRy5CQUQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwID0gcCBeIFBPU1RBRy5CQUQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgaXRlbV9uZXcgPSBkZWJ1Z1Rva2VuKHtcblx0XHRcdFx0XHQuLi5pdGVtLFxuXG5cdFx0XHRcdFx0dzogbncsXG5cdFx0XHRcdFx0b3c6IHcsXG5cdFx0XHRcdFx0cCxcblx0XHRcdFx0XHRvcDogaXRlbS5wLFxuXG5cdFx0XHRcdFx0Ly9bUkFXXTogaXRlbSxcblxuXHRcdFx0XHRcdC8vc291cmNlOiBpdGVtLFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0Y29udmVydFN5bm9ueW06IHRydWUsXG5cdFx0XHRcdFx0Ly9fc291cmNlOiBpdGVtLFxuXG5cdFx0XHRcdFx0LyoqXG5cdFx0XHRcdFx0ICogSlNPTi5zdHJpbmdpZnlcblx0XHRcdFx0XHQgKiBhdm9pZCBUeXBlRXJyb3I6IENvbnZlcnRpbmcgY2lyY3VsYXIgc3RydWN0dXJlIHRvIEpTT05cblx0XHRcdFx0XHQgKi9cblx0XHRcdFx0XHRfc291cmNlOiBkZWVwbWVyZ2Uoe30sIGl0ZW0pIGFzIElXb3JkRGVidWcsXG5cblx0XHRcdFx0fSwgdHJ1ZSk7XG5cblx0XHRcdFx0YS5wdXNoKGl0ZW1fbmV3KTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0YS5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWJ1ZyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fSwgW10gYXMgSVdvcmREZWJ1Z1tdKTtcblx0XHRyZXR1cm4geyBjb3VudDogY291bnQsIGxpc3Q6IGxpc3QgfSBhcyBJQ29udmVydFN5bm9ueW1XaXRoU2hvd2NvdW50O1xuXHR9XG5cblx0bGV0IHJlc3VsdDogSUNvbnZlcnRTeW5vbnltV2l0aFNob3djb3VudDtcblx0ZG9cblx0e1xuXHRcdHJlc3VsdCA9IF9jb252ZXJ0U3lub255bShyZXQpO1xuXHRcdHJldCA9IHJlc3VsdC5saXN0O1xuXG5cdFx0cmVzdWx0Lmxpc3QgPSB1bmRlZmluZWQ7XG5cdH1cblx0d2hpbGUgKHJlc3VsdC5jb3VudCA+IDApO1xuXG5cdHJlc3VsdCA9IHVuZGVmaW5lZDtcblxuXHRpZiAoc2hvd2NvdW50KVxuXHR7XG5cdFx0cmV0dXJuIHsgY291bnQ6IHRvdGFsX2NvdW50LCBsaXN0OiByZXQgfTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG4iXX0=