/**
 * 分词器接口
 *
 * @author 老雷<leizongmin@gmail.com>
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const POSTAG_1 = require("../POSTAG");
const index_1 = require("../mod/index");
const stringify_1 = require("./methods/stringify");
const split_1 = require("./methods/split");
const indexOf_1 = require("./methods/indexOf");
const convertSynonym_1 = require("./methods/convertSynonym");
const listModules_1 = require("./methods/listModules");
const _get_text_1 = require("./methods/_get_text");
const getOptionsDoSegment_1 = require("./methods/getOptionsDoSegment");
const useModules_1 = require("./methods/useModules");
const doSegment_1 = require("./methods/doSegment");
/**
 * 创建分词器接口
 */
class SegmentCore {
    constructor(options = {}) {
        /**
         * 分段
         *
         * 由於 segment 是利用對內容的前後文分析來進行分詞
         * 所以如何切割段落對於結果就會產生不同影響
         *
         * `RegExp` or 具有 `.[Symbol.split](input: string, limit?: number) => string[]` 的物件
         *
         * @type {Segment.ISPLIT}
         */
        this.SPLIT = /([\r\n]+|^[　\s+]+|[　\s]+$|[　\s]{2,})/gm;
        /**
         * 分段之後 如果符合以下條件 則直接忽略分析
         * `RegExp` or 具有 `.test(input: string) => boolean` 的物件
         *
         * @type {Segment.ISPLIT_FILTER}
         */
        this.SPLIT_FILTER = /^([\r\n]+)$/g;
        /**
         * 词性
         * @type {POSTAG}
         */
        this.POSTAG = POSTAG_1.default;
        /**
         * 词典表
         * @type {{}}
         */
        this.DICT = {};
        this.modules = {
            /**
             * 分词模块
             */
            tokenizer: [],
            /**
             * 优化模块
             */
            optimizer: [],
        };
        this.db = {};
        this.options = {};
        const self = this;
        this.options = Object.assign({}, this.options, options);
        this.tokenizer = new index_1.Tokenizer(this);
        this.optimizer = new index_1.Optimizer(this);
        if (this.options.db) {
            this.options.db.forEach(function (data) {
                self.db[data.type] = data;
            });
        }
        delete this.options.db;
    }
    getDictDatabase(type, autocreate, libTableDict) {
        // @ts-ignore
        return this.db[type];
    }
    use(mod, ...argv) {
        return useModules_1.useModules(this, mod, ...argv);
    }
    getDict(type) {
        return this.DICT[type];
    }
    getOptionsDoSegment(options) {
        return getOptionsDoSegment_1.getOptionsDoSegment(options, this.options.optionsDoSegment);
    }
    _get_text(text) {
        return _get_text_1._get_text(text);
    }
    addBlacklist(word, remove) {
        let me = this;
        const BLACKLIST = me.getDictDatabase("BLACKLIST" /* BLACKLIST */);
        const TABLE = me.getDictDatabase("TABLE" /* TABLE */);
        let bool = !remove;
        if (bool) {
            BLACKLIST.add(word);
            TABLE.remove(word);
        }
        else {
            BLACKLIST.remove(word);
        }
        return this;
    }
    /**
     * remove key in TABLE by BLACKLIST
     */
    doBlacklist() {
        let me = this;
        const BLACKLIST = me.getDict("BLACKLIST" /* BLACKLIST */);
        const TABLE = me.getDictDatabase("TABLE" /* TABLE */);
        Object.entries(BLACKLIST)
            .forEach(function ([key, bool]) {
            bool && TABLE.remove(key);
        });
        return this;
    }
    listModules(options = {}) {
        options = this.getOptionsDoSegment(options);
        return listModules_1.listModules(this.modules, options);
    }
    doSegment(text, options = {}) {
        const me = this;
        options = me.getOptionsDoSegment(options);
        //console.dir(options);
        let text_list = me._get_text(text)
            // @ts-ignore
            .split(this.SPLIT);
        text = undefined;
        const mods = me.listModules(options).enable;
        // 将文本按照换行符分割成多段，并逐一分词
        let ret = text_list.reduce(function (ret, section) {
            //console.dir(section);
            if (me.SPLIT_FILTER.test(section)) {
                ret = ret.concat({ w: section });
                section = [];
            }
            //section = section.trim();
            if (section.length > 0) {
                // 分词
                let sret = me.tokenizer.split(section, mods.tokenizer);
                // 优化
                sret = me.optimizer.doOptimize(sret, mods.optimizer);
                // 连接分词结果
                if (sret.length > 0) {
                    ret = ret.concat(sret);
                }
            }
            return ret;
        }, []);
        // 去除标点符号
        if (options.stripPunctuation) {
            ret = doSegment_1._doSegmentStripPOSTAG(ret, POSTAG_1.default.D_W);
        }
        if (options.convertSynonym) {
            ret = this.convertSynonym(ret);
        }
        // 去除停止符
        if (options.stripStopword) {
            ret = doSegment_1._doSegmentStripStopword(ret, me.getDict('STOPWORD'));
        }
        if (options.stripSpace) {
            ret = doSegment_1._doSegmentStripSpace(ret);
        }
        // 仅返回单词内容
        if (options.simple) {
            ret = doSegment_1._doSegmentSimple(ret);
        }
        return ret;
    }
    convertSynonym(ret, showcount) {
        return convertSynonym_1.convertSynonym(ret, {
            showcount,
            DICT_SYNONYM: this.getDict('SYNONYM'),
            DICT_TABLE: this.getDict('TABLE'),
            POSTAG: this.POSTAG,
        });
    }
    /**
     * 将单词数组连接成字符串
     *
     * @param {Array} words 单词数组
     * @return {String}
     */
    stringify(words, ...argv) {
        return stringify_1.stringify(words, ...argv);
    }
    /**
     * 将单词数组连接成字符串
     *
     * @param {Array} words 单词数组
     * @return {String}
     */
    static stringify(words, ...argv) {
        return stringify_1.stringify(words, ...argv);
    }
    /**
     * 根据某个单词或词性来分割单词数组
     *
     * @param {Array} words 单词数组
     * @param {Number|String} s 用于分割的单词或词性
     * @return {Array}
     */
    split(words, s, ...argv) {
        return split_1.split(words, s, ...argv);
    }
    /**
     * 在单词数组中查找某一个单词或词性所在的位置
     *
     * @param {Array} words 单词数组
     * @param {Number|String} s 要查找的单词或词性
     * @param {Number} cur 开始位置
     * @return {Number} 找不到，返回-1
     */
    indexOf(words, s, cur, ...argv) {
        return indexOf_1.indexOf(words, cur, ...argv);
    }
}
exports.SegmentCore = SegmentCore;
exports.default = SegmentCore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILFlBQVksQ0FBQzs7QUFLYixzQ0FBK0I7QUFVL0Isd0NBQWtGO0FBU2xGLG1EQUFnRDtBQUNoRCwyQ0FBd0M7QUFDeEMsK0NBQTRDO0FBQzVDLDZEQUF3RjtBQUN4Rix1REFBb0Q7QUFDcEQsbURBQWdEO0FBQ2hELHVFQUFvRTtBQUNwRSxxREFBa0Q7QUFDbEQsbURBSzZCO0FBSTdCOztHQUVHO0FBQ0gsTUFBYSxXQUFXO0lBK0R2QixZQUFZLFVBQTJCLEVBQUU7UUE1RHpDOzs7Ozs7Ozs7V0FTRztRQUNILFVBQUssR0FBVyx3Q0FBa0QsQ0FBQztRQUVuRTs7Ozs7V0FLRztRQUNILGlCQUFZLEdBQWtCLGNBQStCLENBQUM7UUFFOUQ7OztXQUdHO1FBQ0gsV0FBTSxHQUFHLGdCQUFNLENBQUM7UUFDaEI7OztXQUdHO1FBQ0gsU0FBSSxHQUtBLEVBQUUsQ0FBQztRQUNQLFlBQU8sR0FBRztZQUNUOztlQUVHO1lBQ0gsU0FBUyxFQUFFLEVBQUU7WUFDYjs7ZUFFRztZQUNILFNBQVMsRUFBRSxFQUFFO1NBSWIsQ0FBQztRQUtGLE9BQUUsR0FFRSxFQUFFLENBQUM7UUFFUCxZQUFPLEdBQW9CLEVBQUUsQ0FBQztRQU03QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXhELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxpQkFBUyxDQUFDLElBQVcsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxpQkFBUyxDQUFDLElBQVcsQ0FBQyxDQUFDO1FBRTVDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQ25CO1lBQ0Ms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QUFBO0lBQ2hDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsT0FBTyxDQUFDLEtBQWMsRUFBRSxDQUFrQixFQUFFLEdBQVksRUFBRSxHQUFHLElBQUk7UUFFaEUsT0FBTyxpQkFBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0NBRUQ7QUEzV0Qsa0NBMldDO0FBSUQsa0JBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDliIbor43lmajmjqXlj6NcbiAqXG4gKiBAYXV0aG9yIOiAgembtzxsZWl6b25nbWluQGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIEB0cy1pZ25vcmVcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IFBPU1RBRyBmcm9tICcuLi9QT1NUQUcnO1xuaW1wb3J0IFRhYmxlRGljdEJsYWNrbGlzdCBmcm9tICcuLi90YWJsZS9ibGFja2xpc3QnO1xuaW1wb3J0IEFic3RyYWN0VGFibGVEaWN0Q29yZSBmcm9tICcuLi90YWJsZS9jb3JlJztcbmltcG9ydCB7IElPcHRpb25zIGFzIElPcHRpb25zVGFibGVEaWN0LCBUYWJsZURpY3QgfSBmcm9tICcuLi90YWJsZS9kaWN0JztcblxuaW1wb3J0IExvYWRlciBmcm9tICcuLi9sb2FkZXInO1xuaW1wb3J0IHsgY3JsZiB9IGZyb20gJ2NybGYtbm9ybWFsaXplJztcbmltcG9ydCB7IFRhYmxlRGljdFN0b3B3b3JkIH0gZnJvbSAnLi4vdGFibGUvc3RvcHdvcmQnO1xuaW1wb3J0IFRhYmxlRGljdFN5bm9ueW0gZnJvbSAnLi4vdGFibGUvc3lub255bSc7XG5pbXBvcnQgU2VnbWVudERpY3QgZnJvbSAnc2VnbWVudC1kaWN0JztcbmltcG9ydCB7IElTdWJPcHRpbWl6ZXIsIElTdWJUb2tlbml6ZXIsIE9wdGltaXplciwgVG9rZW5pemVyIH0gZnJvbSAnLi4vbW9kL2luZGV4JztcbmltcG9ydCB7IGRlYnVnVG9rZW4gfSBmcm9tICcuLi91dGlsL2RlYnVnJztcbmltcG9ydCB7IElXb3JkRGVidWcgfSBmcm9tICcuLi91dGlsL2luZGV4JztcblxuaW1wb3J0IGRlZXBtZXJnZSA9IHJlcXVpcmUoJ2RlZXBtZXJnZS1wbHVzJyk7XG5pbXBvcnQgeyBFbnVtRGljdERhdGFiYXNlIH0gZnJvbSAnLi4vY29uc3QnO1xuaW1wb3J0IHsgRU5VTV9TVUJNT0RTLCBFTlVNX1NVQk1PRFNfTkFNRSwgRU5VTV9TVUJNT0RTX09USEVSIH0gZnJvbSAnLi4vbW9kL2luZGV4JztcbmltcG9ydCB7IGRlZmF1bHRPcHRpb25zRG9TZWdtZW50IH0gZnJvbSAnLi9kZWZhdWx0cyc7XG5pbXBvcnQgeyBJRElDVCwgSURJQ1QyLCBJRElDVF9CTEFDS0xJU1QsIElESUNUX1NUT1BXT1JELCBJRElDVF9TWU5PTllNLCBJT3B0aW9uc0RvU2VnbWVudCwgSU9wdGlvbnNTZWdtZW50LCBJU1BMSVQsIElTUExJVF9GSUxURVIsIElXb3JkIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICcuL21ldGhvZHMvc3RyaW5naWZ5JztcbmltcG9ydCB7IHNwbGl0IH0gZnJvbSAnLi9tZXRob2RzL3NwbGl0JztcbmltcG9ydCB7IGluZGV4T2YgfSBmcm9tICcuL21ldGhvZHMvaW5kZXhPZic7XG5pbXBvcnQgeyBjb252ZXJ0U3lub255bSwgSUNvbnZlcnRTeW5vbnltV2l0aFNob3djb3VudCB9IGZyb20gJy4vbWV0aG9kcy9jb252ZXJ0U3lub255bSc7XG5pbXBvcnQgeyBsaXN0TW9kdWxlcyB9IGZyb20gJy4vbWV0aG9kcy9saXN0TW9kdWxlcyc7XG5pbXBvcnQgeyBfZ2V0X3RleHQgfSBmcm9tICcuL21ldGhvZHMvX2dldF90ZXh0JztcbmltcG9ydCB7IGdldE9wdGlvbnNEb1NlZ21lbnQgfSBmcm9tICcuL21ldGhvZHMvZ2V0T3B0aW9uc0RvU2VnbWVudCc7XG5pbXBvcnQgeyB1c2VNb2R1bGVzIH0gZnJvbSAnLi9tZXRob2RzL3VzZU1vZHVsZXMnO1xuaW1wb3J0IHtcblx0X2RvU2VnbWVudFNpbXBsZSxcblx0X2RvU2VnbWVudFN0cmlwUE9TVEFHLFxuXHRfZG9TZWdtZW50U3RyaXBTcGFjZSxcblx0X2RvU2VnbWVudFN0cmlwU3RvcHdvcmQsXG59IGZyb20gJy4vbWV0aG9kcy9kb1NlZ21lbnQnO1xuaW1wb3J0IHsgSVRTT3ZlcndyaXRlIH0gZnJvbSAndHMtdHlwZSc7XG5cblxuLyoqXG4gKiDliJvlu7rliIbor43lmajmjqXlj6NcbiAqL1xuZXhwb3J0IGNsYXNzIFNlZ21lbnRDb3JlXG57XG5cblx0LyoqXG5cdCAqIOWIhuautVxuXHQgKlxuXHQgKiDnlLHmlrwgc2VnbWVudCDmmK/liKnnlKjlsI3lhaflrrnnmoTliY3lvozmlofliIbmnpDkvobpgLLooYzliIboqZ5cblx0ICog5omA5Lul5aaC5L2V5YiH5Ymy5q616JC95bCN5pa857WQ5p6c5bCx5pyD55Si55Sf5LiN5ZCM5b2x6Z+/XG5cdCAqXG5cdCAqIGBSZWdFeHBgIG9yIOWFt+aciSBgLltTeW1ib2wuc3BsaXRdKGlucHV0OiBzdHJpbmcsIGxpbWl0PzogbnVtYmVyKSA9PiBzdHJpbmdbXWAg55qE54mp5Lu2XG5cdCAqXG5cdCAqIEB0eXBlIHtTZWdtZW50LklTUExJVH1cblx0ICovXG5cdFNQTElUOiBJU1BMSVQgPSAvKFtcXHJcXG5dK3xeW+OAgFxccytdK3xb44CAXFxzXSskfFvjgIBcXHNdezIsfSkvZ20gYXMgSVNQTElUO1xuXG5cdC8qKlxuXHQgKiDliIbmrrXkuYvlvowg5aaC5p6c56ym5ZCI5Lul5LiL5qKd5Lu2IOWJh+ebtOaOpeW/veeVpeWIhuaekFxuXHQgKiBgUmVnRXhwYCBvciDlhbfmnIkgYC50ZXN0KGlucHV0OiBzdHJpbmcpID0+IGJvb2xlYW5gIOeahOeJqeS7tlxuXHQgKlxuXHQgKiBAdHlwZSB7U2VnbWVudC5JU1BMSVRfRklMVEVSfVxuXHQgKi9cblx0U1BMSVRfRklMVEVSOiBJU1BMSVRfRklMVEVSID0gL14oW1xcclxcbl0rKSQvZyBhcyBJU1BMSVRfRklMVEVSO1xuXG5cdC8qKlxuXHQgKiDor43mgKdcblx0ICogQHR5cGUge1BPU1RBR31cblx0ICovXG5cdFBPU1RBRyA9IFBPU1RBRztcblx0LyoqXG5cdCAqIOivjeWFuOihqFxuXHQgKiBAdHlwZSB7e319XG5cdCAqL1xuXHRESUNUOiB7XG5cdFx0U1RPUFdPUkQ/OiBJRElDVF9TVE9QV09SRCxcblx0XHRTWU5PTllNPzogSURJQ1RfU1lOT05ZTSxcblxuXHRcdFtrZXk6IHN0cmluZ106IElESUNULFxuXHR9ID0ge307XG5cdG1vZHVsZXMgPSB7XG5cdFx0LyoqXG5cdFx0ICog5YiG6K+N5qih5Z2XXG5cdFx0ICovXG5cdFx0dG9rZW5pemVyOiBbXSxcblx0XHQvKipcblx0XHQgKiDkvJjljJbmqKHlnZdcblx0XHQgKi9cblx0XHRvcHRpbWl6ZXI6IFtdLFxuXHR9IGFzIHtcblx0XHR0b2tlbml6ZXI6IElTdWJUb2tlbml6ZXJbXSxcblx0XHRvcHRpbWl6ZXI6IElTdWJPcHRpbWl6ZXJbXSxcblx0fTtcblxuXHR0b2tlbml6ZXI6IFRva2VuaXplcjtcblx0b3B0aW1pemVyOiBPcHRpbWl6ZXI7XG5cblx0ZGI6IHtcblx0XHRba2V5OiBzdHJpbmddOiBUYWJsZURpY3QsXG5cdH0gPSB7fTtcblxuXHRvcHRpb25zOiBJT3B0aW9uc1NlZ21lbnQgPSB7fTtcblxuXHRpbml0ZWQ/OiBib29sZWFuO1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM6IElPcHRpb25zU2VnbWVudCA9IHt9KVxuXHR7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cblx0XHR0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG5cdFx0dGhpcy50b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKHRoaXMgYXMgYW55KTtcblx0XHR0aGlzLm9wdGltaXplciA9IG5ldyBPcHRpbWl6ZXIodGhpcyBhcyBhbnkpO1xuXG5cdFx0aWYgKHRoaXMub3B0aW9ucy5kYilcblx0XHR7XG5cdFx0XHR0aGlzLm9wdGlvbnMuZGIuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSlcblx0XHRcdHtcblx0XHRcdFx0c2VsZi5kYltkYXRhLnR5cGVdID0gZGF0YTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGRlbGV0ZSB0aGlzLm9wdGlvbnMuZGI7XG5cdH1cblxuXHRnZXREaWN0RGF0YWJhc2U8UiBleHRlbmRzIFRhYmxlRGljdFN5bm9ueW0+KHR5cGU6IEVudW1EaWN0RGF0YWJhc2UuU1lOT05ZTSxcblx0XHRhdXRvY3JlYXRlPzogYm9vbGVhbixcblx0XHRsaWJUYWJsZURpY3Q/OiB7IG5ldyguLi5hcmd2KTogUiB9LFxuXHQpOiBSXG5cdGdldERpY3REYXRhYmFzZTxSIGV4dGVuZHMgVGFibGVEaWN0Pih0eXBlOiBFbnVtRGljdERhdGFiYXNlLlRBQkxFLCBhdXRvY3JlYXRlPzogYm9vbGVhbiwgbGliVGFibGVEaWN0PzogeyBuZXcoLi4uYXJndik6IFIgfSk6IFJcblx0Z2V0RGljdERhdGFiYXNlPFIgZXh0ZW5kcyBUYWJsZURpY3RTdG9wd29yZD4odHlwZTogRW51bURpY3REYXRhYmFzZS5TVE9QV09SRCxcblx0XHRhdXRvY3JlYXRlPzogYm9vbGVhbixcblx0XHRsaWJUYWJsZURpY3Q/OiB7IG5ldyguLi5hcmd2KTogUiB9LFxuXHQpOiBSXG5cdGdldERpY3REYXRhYmFzZTxSIGV4dGVuZHMgVGFibGVEaWN0QmxhY2tsaXN0Pih0eXBlOiBFbnVtRGljdERhdGFiYXNlLkJMQUNLTElTVCxcblx0XHRhdXRvY3JlYXRlPzogYm9vbGVhbixcblx0XHRsaWJUYWJsZURpY3Q/OiB7IG5ldyguLi5hcmd2KTogUiB9LFxuXHQpOiBSXG5cdGdldERpY3REYXRhYmFzZTxSIGV4dGVuZHMgVGFibGVEaWN0QmxhY2tsaXN0Pih0eXBlOiBFbnVtRGljdERhdGFiYXNlLkJMQUNLTElTVF9GT1JfT1BUSU1JWkVSLFxuXHRcdGF1dG9jcmVhdGU/OiBib29sZWFuLFxuXHRcdGxpYlRhYmxlRGljdD86IHsgbmV3KC4uLmFyZ3YpOiBSIH0sXG5cdCk6IFJcblx0Z2V0RGljdERhdGFiYXNlPFIgZXh0ZW5kcyBBYnN0cmFjdFRhYmxlRGljdENvcmU8YW55Pj4odHlwZTogc3RyaW5nIHwgRW51bURpY3REYXRhYmFzZSxcblx0XHRhdXRvY3JlYXRlPzogYm9vbGVhbixcblx0XHRsaWJUYWJsZURpY3Q/OiB7IG5ldyguLi5hcmd2KTogUiB9LFxuXHQpOiBSXG5cdGdldERpY3REYXRhYmFzZSh0eXBlOiBzdHJpbmcsIGF1dG9jcmVhdGU/OiBib29sZWFuLCBsaWJUYWJsZURpY3Q/KVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiB0aGlzLmRiW3R5cGVdO1xuXHR9XG5cblx0LyoqXG5cdCAqIOi9veWFpeWIhuivjeaooeWdl1xuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ3xBcnJheXxPYmplY3R9IG1vZHVsZSDmqKHlnZflkI3np7Ao5pWw57uEKeaIluaooeWdl+WvueixoVxuXHQgKiBAcmV0dXJuIHtTZWdtZW50fVxuXHQgKi9cblx0dXNlKG1vZDogSVN1Yk9wdGltaXplciwgLi4uYXJndik6IHRoaXNcblx0dXNlKG1vZDogSVN1YlRva2VuaXplciwgLi4uYXJndik6IHRoaXNcblx0dXNlKG1vZCwgLi4uYXJndik6IHRoaXNcblx0dXNlKG1vZCwgLi4uYXJndilcblx0e1xuXHRcdHJldHVybiB1c2VNb2R1bGVzKHRoaXMsIG1vZCwgLi4uYXJndik7XG5cdH1cblxuXHQvKipcblx0ICog5Y+W6K+N5YW46KGoXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIOexu+Wei1xuXHQgKiBAcmV0dXJuIHtvYmplY3R9XG5cdCAqL1xuXHRnZXREaWN0KHR5cGU6IEVudW1EaWN0RGF0YWJhc2UuU1RPUFdPUkQpOiBJRElDVF9TVE9QV09SRFxuXHRnZXREaWN0KHR5cGU6IEVudW1EaWN0RGF0YWJhc2UuU1lOT05ZTSk6IElESUNUX1NZTk9OWU1cblx0Z2V0RGljdCh0eXBlOiBFbnVtRGljdERhdGFiYXNlLlRBQkxFKTogSURJQ1Q8SVdvcmQ+XG5cdGdldERpY3QodHlwZTogRW51bURpY3REYXRhYmFzZS5CTEFDS0xJU1QpOiBJRElDVF9CTEFDS0xJU1Rcblx0Z2V0RGljdCh0eXBlOiBFbnVtRGljdERhdGFiYXNlLkJMQUNLTElTVF9GT1JfT1BUSU1JWkVSKTogSURJQ1RfQkxBQ0tMSVNUXG5cdGdldERpY3QodHlwZTogJ1RBQkxFMicpOiBJRElDVDI8SVdvcmQ+XG5cdGdldERpY3QodHlwZTogRW51bURpY3REYXRhYmFzZSk6IElESUNUXG5cdGdldERpY3QodHlwZSk6IElESUNUXG5cdGdldERpY3QodHlwZSlcblx0e1xuXHRcdHJldHVybiB0aGlzLkRJQ1RbdHlwZV07XG5cdH1cblxuXHRnZXRPcHRpb25zRG9TZWdtZW50PFQgZXh0ZW5kcyBJT3B0aW9uc0RvU2VnbWVudD4ob3B0aW9ucz86IFQpOiBUXG5cdHtcblx0XHRyZXR1cm4gZ2V0T3B0aW9uc0RvU2VnbWVudDxUPihvcHRpb25zLCB0aGlzLm9wdGlvbnMub3B0aW9uc0RvU2VnbWVudClcblx0fVxuXG5cdHByb3RlY3RlZCBfZ2V0X3RleHQodGV4dDogc3RyaW5nIHwgQnVmZmVyKTogc3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gX2dldF90ZXh0KHRleHQpXG5cdH1cblxuXHRhZGRCbGFja2xpc3Qod29yZDogc3RyaW5nLCByZW1vdmU/OiBib29sZWFuKVxuXHR7XG5cdFx0bGV0IG1lID0gdGhpcztcblxuXHRcdGNvbnN0IEJMQUNLTElTVCA9IG1lLmdldERpY3REYXRhYmFzZShFbnVtRGljdERhdGFiYXNlLkJMQUNLTElTVCk7XG5cdFx0Y29uc3QgVEFCTEUgPSBtZS5nZXREaWN0RGF0YWJhc2UoRW51bURpY3REYXRhYmFzZS5UQUJMRSk7XG5cblx0XHRsZXQgYm9vbCA9ICFyZW1vdmU7XG5cblx0XHRpZiAoYm9vbClcblx0XHR7XG5cdFx0XHRCTEFDS0xJU1QuYWRkKHdvcmQpO1xuXHRcdFx0VEFCTEUucmVtb3ZlKHdvcmQpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0QkxBQ0tMSVNULnJlbW92ZSh3b3JkKVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzXG5cdH1cblxuXHQvKipcblx0ICogcmVtb3ZlIGtleSBpbiBUQUJMRSBieSBCTEFDS0xJU1Rcblx0ICovXG5cdGRvQmxhY2tsaXN0KClcblx0e1xuXHRcdGxldCBtZSA9IHRoaXM7XG5cblx0XHRjb25zdCBCTEFDS0xJU1QgPSBtZS5nZXREaWN0KEVudW1EaWN0RGF0YWJhc2UuQkxBQ0tMSVNUKTtcblx0XHRjb25zdCBUQUJMRSA9IG1lLmdldERpY3REYXRhYmFzZShFbnVtRGljdERhdGFiYXNlLlRBQkxFKTtcblxuXHRcdE9iamVjdC5lbnRyaWVzKEJMQUNLTElTVClcblx0XHRcdC5mb3JFYWNoKGZ1bmN0aW9uIChba2V5LCBib29sXSlcblx0XHRcdHtcblx0XHRcdFx0Ym9vbCAmJiBUQUJMRS5yZW1vdmUoa2V5KVxuXHRcdFx0fSlcblx0XHQ7XG5cblx0XHRyZXR1cm4gdGhpc1xuXHR9XG5cblx0bGlzdE1vZHVsZXMob3B0aW9uczogSU9wdGlvbnNEb1NlZ21lbnQgPSB7fSlcblx0e1xuXHRcdG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnNEb1NlZ21lbnQob3B0aW9ucyk7XG5cblx0XHRyZXR1cm4gbGlzdE1vZHVsZXModGhpcy5tb2R1bGVzLCBvcHRpb25zKTtcblx0fVxuXG5cdC8qKlxuXHQgKiDlvIDlp4vliIbor41cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IHRleHQg5paH5pysXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIOmAiemhuVxuXHQgKiAgIC0ge0Jvb2xlYW59IHNpbXBsZSDmmK/lkKbku4Xov5Tlm57ljZXor43lhoXlrrlcblx0ICogICAtIHtCb29sZWFufSBzdHJpcFB1bmN0dWF0aW9uIOWOu+mZpOagh+eCueespuWPt1xuXHQgKiAgIC0ge0Jvb2xlYW59IGNvbnZlcnRTeW5vbnltIOi9rOaNouWQjOS5ieivjVxuXHQgKiAgIC0ge0Jvb2xlYW59IHN0cmlwU3RvcHdvcmQg5Y676Zmk5YGc5q2i56ymXG5cdCAqIEByZXR1cm4ge0FycmF5fVxuXHQgKi9cblx0ZG9TZWdtZW50KHRleHQ6IHN0cmluZyB8IEJ1ZmZlciwgb3B0aW9uczogSVRTT3ZlcndyaXRlPElPcHRpb25zRG9TZWdtZW50LCB7XG5cdFx0c2ltcGxlOiB0cnVlLFxuXHR9Pik6IHN0cmluZ1tdXG5cdGRvU2VnbWVudCh0ZXh0OiBzdHJpbmcgfCBCdWZmZXIsIG9wdGlvbnM/OiBJT3B0aW9uc0RvU2VnbWVudCk6IElXb3JkW11cblx0ZG9TZWdtZW50KHRleHQsIG9wdGlvbnM6IElPcHRpb25zRG9TZWdtZW50ID0ge30pXG5cdHtcblx0XHRjb25zdCBtZSA9IHRoaXM7XG5cblx0XHRvcHRpb25zID0gbWUuZ2V0T3B0aW9uc0RvU2VnbWVudChvcHRpb25zKTtcblxuXHRcdC8vY29uc29sZS5kaXIob3B0aW9ucyk7XG5cblx0XHRsZXQgdGV4dF9saXN0ID0gbWUuX2dldF90ZXh0KHRleHQpXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHQuc3BsaXQodGhpcy5TUExJVClcblx0XHQ7XG5cdFx0dGV4dCA9IHVuZGVmaW5lZDtcblxuXHRcdGNvbnN0IG1vZHMgPSBtZS5saXN0TW9kdWxlcyhvcHRpb25zKS5lbmFibGU7XG5cblx0XHQvLyDlsIbmlofmnKzmjInnhafmjaLooYznrKbliIblibLmiJDlpJrmrrXvvIzlubbpgJDkuIDliIbor41cblx0XHRsZXQgcmV0ID0gdGV4dF9saXN0LnJlZHVjZShmdW5jdGlvbiAocmV0LCBzZWN0aW9uKVxuXHRcdHtcblx0XHRcdC8vY29uc29sZS5kaXIoc2VjdGlvbik7XG5cblx0XHRcdGlmIChtZS5TUExJVF9GSUxURVIudGVzdChzZWN0aW9uKSlcblx0XHRcdHtcblx0XHRcdFx0cmV0ID0gcmV0LmNvbmNhdCh7IHc6IHNlY3Rpb24gfSk7XG5cblx0XHRcdFx0c2VjdGlvbiA9IFtdO1xuXHRcdFx0fVxuXG5cdFx0XHQvL3NlY3Rpb24gPSBzZWN0aW9uLnRyaW0oKTtcblx0XHRcdGlmIChzZWN0aW9uLmxlbmd0aCA+IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vIOWIhuivjVxuXHRcdFx0XHRsZXQgc3JldCA9IG1lLnRva2VuaXplci5zcGxpdChzZWN0aW9uLCBtb2RzLnRva2VuaXplcik7XG5cblx0XHRcdFx0Ly8g5LyY5YyWXG5cdFx0XHRcdHNyZXQgPSBtZS5vcHRpbWl6ZXIuZG9PcHRpbWl6ZShzcmV0LCBtb2RzLm9wdGltaXplcik7XG5cblx0XHRcdFx0Ly8g6L+e5o6l5YiG6K+N57uT5p6cXG5cdFx0XHRcdGlmIChzcmV0Lmxlbmd0aCA+IDApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXQgPSByZXQuY29uY2F0KHNyZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSwgW10pO1xuXG5cdFx0Ly8g5Y676Zmk5qCH54K556ym5Y+3XG5cdFx0aWYgKG9wdGlvbnMuc3RyaXBQdW5jdHVhdGlvbilcblx0XHR7XG5cdFx0XHRyZXQgPSBfZG9TZWdtZW50U3RyaXBQT1NUQUcocmV0LCBQT1NUQUcuRF9XKVxuXHRcdH1cblxuXHRcdGlmIChvcHRpb25zLmNvbnZlcnRTeW5vbnltKVxuXHRcdHtcblx0XHRcdHJldCA9IHRoaXMuY29udmVydFN5bm9ueW0ocmV0KTtcblx0XHR9XG5cblx0XHQvLyDljrvpmaTlgZzmraLnrKZcblx0XHRpZiAob3B0aW9ucy5zdHJpcFN0b3B3b3JkKVxuXHRcdHtcblx0XHRcdHJldCA9IF9kb1NlZ21lbnRTdHJpcFN0b3B3b3JkKHJldCwgbWUuZ2V0RGljdCgnU1RPUFdPUkQnKSlcblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy5zdHJpcFNwYWNlKVxuXHRcdHtcblx0XHRcdHJldCA9IF9kb1NlZ21lbnRTdHJpcFNwYWNlKHJldClcblx0XHR9XG5cblx0XHQvLyDku4Xov5Tlm57ljZXor43lhoXlrrlcblx0XHRpZiAob3B0aW9ucy5zaW1wbGUpXG5cdFx0e1xuXHRcdFx0cmV0ID0gX2RvU2VnbWVudFNpbXBsZShyZXQpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdC8qKlxuXHQgKiDovazmjaLlkIzkuYnor41cblx0ICovXG5cdGNvbnZlcnRTeW5vbnltKHJldDogSVdvcmREZWJ1Z1tdLCBzaG93Y291bnQ6IHRydWUpOiB7XG5cdFx0Y291bnQ6IG51bWJlcixcblx0XHRsaXN0OiBJV29yZERlYnVnW10sXG5cdH1cblx0LyoqXG5cdCAqIOi9rOaNouWQjOS5ieivjVxuXHQgKi9cblx0Y29udmVydFN5bm9ueW0ocmV0OiBJV29yZERlYnVnW10sIHNob3djb3VudD86IGJvb2xlYW4pOiBJV29yZERlYnVnW11cblx0Y29udmVydFN5bm9ueW0ocmV0OiBJV29yZERlYnVnW10sIHNob3djb3VudD86IGJvb2xlYW4pXG5cdHtcblx0XHRyZXR1cm4gY29udmVydFN5bm9ueW0ocmV0LCB7XG5cdFx0XHRzaG93Y291bnQsXG5cdFx0XHRESUNUX1NZTk9OWU06IHRoaXMuZ2V0RGljdCgnU1lOT05ZTScpLFxuXHRcdFx0RElDVF9UQUJMRTogdGhpcy5nZXREaWN0KCdUQUJMRScpLFxuXHRcdFx0UE9TVEFHOiB0aGlzLlBPU1RBRyxcblx0XHR9KSBhcyBJV29yZERlYnVnW10gfCBJQ29udmVydFN5bm9ueW1XaXRoU2hvd2NvdW50O1xuXHR9XG5cblx0LyoqXG5cdCAqIOWwhuWNleivjeaVsOe7hOi/nuaOpeaIkOWtl+espuS4slxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyDljZXor43mlbDnu4Rcblx0ICogQHJldHVybiB7U3RyaW5nfVxuXHQgKi9cblx0c3RyaW5naWZ5KHdvcmRzOiBBcnJheTxJV29yZCB8IHN0cmluZz4sIC4uLmFyZ3YpOiBzdHJpbmdcblx0e1xuXHRcdHJldHVybiBzdHJpbmdpZnkod29yZHMsIC4uLmFyZ3YpO1xuXHR9XG5cblx0LyoqXG5cdCAqIOWwhuWNleivjeaVsOe7hOi/nuaOpeaIkOWtl+espuS4slxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyDljZXor43mlbDnu4Rcblx0ICogQHJldHVybiB7U3RyaW5nfVxuXHQgKi9cblx0c3RhdGljIHN0cmluZ2lmeSh3b3JkczogQXJyYXk8SVdvcmQgfCBzdHJpbmc+LCAuLi5hcmd2KTogc3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gc3RyaW5naWZ5KHdvcmRzLCAuLi5hcmd2KVxuXHR9XG5cblx0LyoqXG5cdCAqIOagueaNruafkOS4quWNleivjeaIluivjeaAp+adpeWIhuWJsuWNleivjeaVsOe7hFxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyDljZXor43mlbDnu4Rcblx0ICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBzIOeUqOS6juWIhuWJsueahOWNleivjeaIluivjeaAp1xuXHQgKiBAcmV0dXJuIHtBcnJheX1cblx0ICovXG5cdHNwbGl0KHdvcmRzOiBJV29yZFtdLCBzOiBzdHJpbmcgfCBudW1iZXIsIC4uLmFyZ3YpOiBJV29yZFtdXG5cdHtcblx0XHRyZXR1cm4gc3BsaXQod29yZHMsIHMsIC4uLmFyZ3YpXG5cdH1cblxuXHQvKipcblx0ICog5Zyo5Y2V6K+N5pWw57uE5Lit5p+l5om+5p+Q5LiA5Liq5Y2V6K+N5oiW6K+N5oCn5omA5Zyo55qE5L2N572uXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIOWNleivjeaVsOe7hFxuXHQgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHMg6KaB5p+l5om+55qE5Y2V6K+N5oiW6K+N5oCnXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjdXIg5byA5aeL5L2N572uXG5cdCAqIEByZXR1cm4ge051bWJlcn0g5om+5LiN5Yiw77yM6L+U5ZueLTFcblx0ICovXG5cdGluZGV4T2Yod29yZHM6IElXb3JkW10sIHM6IHN0cmluZyB8IG51bWJlciwgY3VyPzogbnVtYmVyLCAuLi5hcmd2KVxuXHR7XG5cdFx0cmV0dXJuIGluZGV4T2Yod29yZHMsIGN1ciwgLi4uYXJndilcblx0fVxuXG59XG5cbmV4cG9ydCB7IElESUNULCBJRElDVDIsIElESUNUX0JMQUNLTElTVCwgSURJQ1RfU1RPUFdPUkQsIElESUNUX1NZTk9OWU0sIElPcHRpb25zRG9TZWdtZW50LCBJT3B0aW9uc1NlZ21lbnQsIElTUExJVCwgSVNQTElUX0ZJTFRFUiwgSVdvcmQgfVxuXG5leHBvcnQgZGVmYXVsdCBTZWdtZW50Q29yZTtcbiJdfQ==