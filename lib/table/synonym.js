"use strict";
/**
 * Created by user on 2018/4/19/019.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableDictSynonym = void 0;
const synonym_pangu_1 = require("./synonym.pangu");
/**
 * 請注意 這與原版 node-segment 的格式不同
 *
 * 原版為一對一 => 錯字,正字
 * 這裡為一對多 並且順序與原版相反 => 正字,錯字,...以,分隔更多字
 */
class TableDictSynonym extends synonym_pangu_1.TableDictSynonymPanGu {
    constructor(type = TableDictSynonym.type, options = {}, ...argv) {
        super(type, options, ...argv);
        /**
         * 緩存主KEY
         */
        this.TABLE2 = {};
    }
    add(data, skipExists) {
        if (!Array.isArray(data) || data.length < 2) {
            throw new TypeError(JSON.stringify(data));
        }
        let w = this._trim(data.shift());
        if (!w) {
            throw new TypeError(JSON.stringify(data));
        }
        let self = this;
        self.TABLE2[w] = self.TABLE2[w] || [];
        if (skipExists == null) {
            skipExists = true;
        }
        data.forEach(function (bw, index) {
            bw = self._trim(bw);
            if (!bw) {
                if (index == 0) {
                    throw new TypeError();
                }
                return;
            }
            if (skipExists && self.exists(bw) || bw in self.TABLE2) {
                return;
            }
            self.TABLE2[w].push(bw);
            self._add(bw, w);
            //skipExists = true;
        });
        return this;
    }
}
exports.TableDictSynonym = TableDictSynonym;
exports.default = TableDictSynonym;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lub255bS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN5bm9ueW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFPSCxtREFBd0Q7QUFVeEQ7Ozs7O0dBS0c7QUFDSCxNQUFhLGdCQUFpQixTQUFRLHFDQUFxQjtJQUcxRCxZQUFZLE9BQWUsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFVBQW9CLEVBQUUsRUFBRSxHQUFHLElBQUk7UUFFaEYsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUc5Qjs7V0FFRztRQUNJLFdBQU0sR0FBb0IsRUFBRSxDQUFDO0lBTHBDLENBQUM7SUFPRCxHQUFHLENBQUMsSUFBNEIsRUFBRSxVQUFvQjtRQUVyRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDM0M7WUFDQyxNQUFNLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUMxQztRQUVELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLENBQUMsRUFDTjtZQUNDLE1BQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFdEMsSUFBSSxVQUFVLElBQUksSUFBSSxFQUN0QjtZQUNDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDbEI7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLEtBQUs7WUFFL0IsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFcEIsSUFBSSxDQUFDLEVBQUUsRUFDUDtnQkFDQyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQ2Q7b0JBQ0MsTUFBTSxJQUFJLFNBQVMsRUFBRSxDQUFDO2lCQUN0QjtnQkFFRCxPQUFPO2FBQ1A7WUFFRCxJQUFJLFVBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUN0RDtnQkFDQyxPQUFPO2FBQ1A7WUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUVqQixvQkFBb0I7UUFDckIsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FFRDtBQWhFRCw0Q0FnRUM7QUFFRCxrQkFBZSxnQkFBZ0IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTgvNC8xOS8wMTkuXG4gKi9cblxuaW1wb3J0IHsgSURJQ1RfU1lOT05ZTSwgSVdvcmQgfSBmcm9tICcuLi9TZWdtZW50JztcbmltcG9ydCB7IElEaWN0Um93IH0gZnJvbSAnc2VnbWVudC1kaWN0L2xpYi9sb2FkZXIvc2VnbWVudCc7XG5pbXBvcnQgQ2prQ29udiBmcm9tICdjamstY29udic7XG5pbXBvcnQgeyB0ZXh0X2xpc3QgfSBmcm9tICcuLi91dGlsL2Nqayc7XG5pbXBvcnQgQWJzdHJhY3RUYWJsZURpY3RDb3JlLCB7IElESUNULCBJRElDVDIsIElPcHRpb25zIH0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCB7IFRhYmxlRGljdFN5bm9ueW1QYW5HdSB9IGZyb20gJy4vc3lub255bS5wYW5ndSc7XG5pbXBvcnQgVVN0cmluZyBmcm9tICd1bmktc3RyaW5nJztcblxuZXhwb3J0IHR5cGUgQXJyYXlUd29Pck1vcmU8VD4gPSB7XG5cdDA6IFQsXG5cdDE6IFQsXG5cdFtuOiBudW1iZXJdOiBULFxuXHRsZW5ndGg6IG51bWJlcixcbn1cblxuLyoqXG4gKiDoq4vms6jmhI8g6YCZ6IiH5Y6f54mIIG5vZGUtc2VnbWVudCDnmoTmoLzlvI/kuI3lkIxcbiAqXG4gKiDljp/niYjngrrkuIDlsI3kuIAgPT4g6Yyv5a2XLOato+Wtl1xuICog6YCZ6KOh54K65LiA5bCN5aSaIOS4puS4lOmghuW6j+iIh+WOn+eJiOebuOWPjSA9PiDmraPlrZcs6Yyv5a2XLC4uLuS7pSzliIbpmpTmm7TlpJrlrZdcbiAqL1xuZXhwb3J0IGNsYXNzIFRhYmxlRGljdFN5bm9ueW0gZXh0ZW5kcyBUYWJsZURpY3RTeW5vbnltUGFuR3VcbntcblxuXHRjb25zdHJ1Y3Rvcih0eXBlOiBzdHJpbmcgPSBUYWJsZURpY3RTeW5vbnltLnR5cGUsIG9wdGlvbnM6IElPcHRpb25zID0ge30sIC4uLmFyZ3YpXG5cdHtcblx0XHRzdXBlcih0eXBlLCBvcHRpb25zLCAuLi5hcmd2KVxuXHR9XG5cblx0LyoqXG5cdCAqIOe3qeWtmOS4u0tFWVxuXHQgKi9cblx0cHVibGljIFRBQkxFMjogSURJQ1Q8c3RyaW5nW10+ID0ge307XG5cblx0YWRkKGRhdGE6IEFycmF5VHdvT3JNb3JlPHN0cmluZz4sIHNraXBFeGlzdHM/OiBib29sZWFuKVxuXHR7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8IGRhdGEubGVuZ3RoIDwgMilcblx0XHR7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblx0XHR9XG5cblx0XHRsZXQgdyA9IHRoaXMuX3RyaW0oZGF0YS5zaGlmdCgpKTtcblxuXHRcdGlmICghdylcblx0XHR7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblx0XHR9XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHRzZWxmLlRBQkxFMlt3XSA9IHNlbGYuVEFCTEUyW3ddIHx8IFtdO1xuXG5cdFx0aWYgKHNraXBFeGlzdHMgPT0gbnVsbClcblx0XHR7XG5cdFx0XHRza2lwRXhpc3RzID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRkYXRhLmZvckVhY2goZnVuY3Rpb24gKGJ3LCBpbmRleClcblx0XHR7XG5cdFx0XHRidyA9IHNlbGYuX3RyaW0oYncpO1xuXG5cdFx0XHRpZiAoIWJ3KVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoaW5kZXggPT0gMClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNraXBFeGlzdHMgJiYgc2VsZi5leGlzdHMoYncpIHx8IGJ3IGluIHNlbGYuVEFCTEUyKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHNlbGYuVEFCTEUyW3ddLnB1c2goYncpO1xuXHRcdFx0c2VsZi5fYWRkKGJ3LCB3KTtcblxuXHRcdFx0Ly9za2lwRXhpc3RzID0gdHJ1ZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFibGVEaWN0U3lub255bVxuIl19