"use strict";
/**
 * Created by user on 2018/4/19/019.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableDictSynonymPanGu = void 0;
const core_1 = require("./core");
/**
 * 原版 node-segment 的格式
 */
let TableDictSynonymPanGu = /** @class */ (() => {
    class TableDictSynonymPanGu extends core_1.default {
        constructor(type = TableDictSynonymPanGu.type, options = {}, ...argv) {
            super(type, options, ...argv);
        }
        add(data, skipExists) {
            if (!Array.isArray(data) || data.length != 2) {
                throw new TypeError(JSON.stringify(data));
            }
            data[0] = this._trim(data[0]);
            data[1] = this._trim(data[1]);
            if (!data[0]) {
                throw new TypeError(JSON.stringify(data));
            }
            if (skipExists && this.exists(data[0])) {
                return this;
            }
            this._add(data[0], data[1]);
            return this;
        }
        _add(n1, n2) {
            if (n1 !== n2) {
                this.TABLE[n1] = n2;
            }
            if (this.TABLE[n2] === n1) {
                delete this.TABLE[n2];
            }
        }
        _trim(s) {
            return s.replace(/^\s+|\s+$/g, '').trim();
        }
    }
    TableDictSynonymPanGu.type = 'SYNONYM';
    return TableDictSynonymPanGu;
})();
exports.TableDictSynonymPanGu = TableDictSynonymPanGu;
exports.default = TableDictSynonymPanGu;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lub255bS5wYW5ndS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN5bm9ueW0ucGFuZ3UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFNSCxpQ0FBd0U7QUFFeEU7O0dBRUc7QUFDSDtJQUFBLE1BQWEscUJBQXNCLFNBQVEsY0FBNkI7UUFJdkUsWUFBWSxPQUFlLHFCQUFxQixDQUFDLElBQUksRUFBRSxVQUFvQixFQUFFLEVBQUUsR0FBRyxJQUFJO1lBRXJGLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDOUIsQ0FBQztRQUVELEdBQUcsQ0FBQyxJQUFpQyxFQUFFLFVBQW9CO1lBRTFELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUM1QztnQkFDQyxNQUFNLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUMxQztZQUVELElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTlCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1o7Z0JBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDMUM7WUFFRCxJQUFJLFVBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0QztnQkFDQyxPQUFPLElBQUksQ0FBQzthQUNaO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFNUIsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsSUFBSSxDQUFDLEVBQVUsRUFBRSxFQUFVO1lBRTFCLElBQUksRUFBRSxLQUFLLEVBQUUsRUFDYjtnQkFDQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNwQjtZQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQ3pCO2dCQUNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN0QjtRQUNGLENBQUM7UUFFUyxLQUFLLENBQUMsQ0FBUztZQUV4QixPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNDLENBQUM7O0lBaERlLDBCQUFJLEdBQUcsU0FBUyxDQUFDO0lBa0RsQyw0QkFBQztLQUFBO0FBcERZLHNEQUFxQjtBQXNEbEMsa0JBQWUscUJBQXFCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzQvMTkvMDE5LlxuICovXG5cbmltcG9ydCB7IElESUNUX1NZTk9OWU0sIElXb3JkIH0gZnJvbSAnLi4vU2VnbWVudCc7XG5pbXBvcnQgeyBJRGljdFJvdyB9IGZyb20gJ3NlZ21lbnQtZGljdC9saWIvbG9hZGVyL3NlZ21lbnQnO1xuaW1wb3J0IENqa0NvbnYgZnJvbSAnY2prLWNvbnYnO1xuaW1wb3J0IHsgdGV4dF9saXN0IH0gZnJvbSAnLi4vdXRpbC9jamsnO1xuaW1wb3J0IEFic3RyYWN0VGFibGVEaWN0Q29yZSwgeyBJRElDVCwgSURJQ1QyLCBJT3B0aW9ucyB9IGZyb20gJy4vY29yZSc7XG5cbi8qKlxuICog5Y6f54mIIG5vZGUtc2VnbWVudCDnmoTmoLzlvI9cbiAqL1xuZXhwb3J0IGNsYXNzIFRhYmxlRGljdFN5bm9ueW1QYW5HdSBleHRlbmRzIEFic3RyYWN0VGFibGVEaWN0Q29yZTxzdHJpbmc+XG57XG5cdHN0YXRpYyByZWFkb25seSB0eXBlID0gJ1NZTk9OWU0nO1xuXG5cdGNvbnN0cnVjdG9yKHR5cGU6IHN0cmluZyA9IFRhYmxlRGljdFN5bm9ueW1QYW5HdS50eXBlLCBvcHRpb25zOiBJT3B0aW9ucyA9IHt9LCAuLi5hcmd2KVxuXHR7XG5cdFx0c3VwZXIodHlwZSwgb3B0aW9ucywgLi4uYXJndilcblx0fVxuXG5cdGFkZChkYXRhOiBbc3RyaW5nLCBzdHJpbmddICYgc3RyaW5nW10sIHNraXBFeGlzdHM/OiBib29sZWFuKVxuXHR7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8IGRhdGEubGVuZ3RoICE9IDIpXG5cdFx0e1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cdFx0fVxuXG5cdFx0ZGF0YVswXSA9IHRoaXMuX3RyaW0oZGF0YVswXSk7XG5cdFx0ZGF0YVsxXSA9IHRoaXMuX3RyaW0oZGF0YVsxXSk7XG5cblx0XHRpZiAoIWRhdGFbMF0pXG5cdFx0e1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cdFx0fVxuXG5cdFx0aWYgKHNraXBFeGlzdHMgJiYgdGhpcy5leGlzdHMoZGF0YVswXSkpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0dGhpcy5fYWRkKGRhdGFbMF0sIGRhdGFbMV0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRfYWRkKG4xOiBzdHJpbmcsIG4yOiBzdHJpbmcpXG5cdHtcblx0XHRpZiAobjEgIT09IG4yKVxuXHRcdHtcblx0XHRcdHRoaXMuVEFCTEVbbjFdID0gbjI7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuVEFCTEVbbjJdID09PSBuMSlcblx0XHR7XG5cdFx0XHRkZWxldGUgdGhpcy5UQUJMRVtuMl07XG5cdFx0fVxuXHR9XG5cblx0cHJvdGVjdGVkIF90cmltKHM6IHN0cmluZylcblx0e1xuXHRcdHJldHVybiBzLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKS50cmltKCk7XG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUYWJsZURpY3RTeW5vbnltUGFuR3VcbiJdfQ==