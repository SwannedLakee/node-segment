"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableDictLine = void 0;
const line_1 = require("segment-dict/lib/loader/line");
const util_1 = require("../util");
const core_1 = require("./core");
/**
 * 原版 node-segment 的格式
 */
class TableDictLine extends core_1.default {
    exists(data, ...argv) {
        let w = this._exists(data);
        let bool = this.TABLE[w];
        return typeof bool === 'boolean' ? bool : null;
    }
    add(word) {
        let self = this;
        if (Array.isArray(word)) {
            word.forEach(v => self._add(v));
        }
        else {
            self._add(word);
        }
        return this;
    }
    _add(word) {
        word = word.trim();
        if (word) {
            this.TABLE[word] = true;
        }
    }
    remove(word) {
        let self = this;
        self._remove(word);
        return this;
    }
    _remove(word) {
        delete this.TABLE[word];
    }
    json() {
        return util_1.cloneDeep(this.TABLE);
    }
    stringify(LF = "\n") {
        let self = this;
        return Object.entries(self.TABLE)
            .reduce(function (a, [w, bool]) {
            if (bool) {
                let line = line_1.stringifyLine(w);
                a.push(line);
            }
            return a;
        }, [])
            .join(typeof LF === 'string' ? LF : "\n");
    }
}
exports.TableDictLine = TableDictLine;
exports.default = TableDictLine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdURBQXVFO0FBRXZFLGtDQUFvQztBQUVwQyxpQ0FBd0U7QUFFeEU7O0dBRUc7QUFDSCxNQUFzQixhQUFjLFNBQVEsY0FBOEI7SUFFbEUsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUk7UUFFMUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUzQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpCLE9BQU8sT0FBTyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtJQUMvQyxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQXVCO1FBRTFCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUVoQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQ3ZCO1lBQ0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUMvQjthQUVEO1lBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFZO1FBRWhCLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFbkIsSUFBSSxJQUFJLEVBQ1I7WUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztTQUN4QjtJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUVsQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuQixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBWTtRQUVuQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDeEIsQ0FBQztJQUVELElBQUk7UUFFSCxPQUFPLGdCQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzdCLENBQUM7SUFFRCxTQUFTLENBQUMsRUFBRSxHQUFHLElBQUk7UUFFbEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQy9CLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM7WUFFN0IsSUFBSSxJQUFJLEVBQ1I7Z0JBQ0MsSUFBSSxJQUFJLEdBQUcsb0JBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNiO1lBRUQsT0FBTyxDQUFDLENBQUE7UUFDVCxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQ0wsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDeEM7SUFDSCxDQUFDO0NBQ0Q7QUF6RUQsc0NBeUVDO0FBRUQsa0JBQWUsYUFBYSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURJQ1RfU1lOT05ZTSwgSVdvcmQgfSBmcm9tICcuLi9TZWdtZW50JztcbmltcG9ydCB7IElEaWN0Um93LCBzdHJpbmdpZnlMaW5lIH0gZnJvbSAnc2VnbWVudC1kaWN0L2xpYi9sb2FkZXIvbGluZSc7XG5pbXBvcnQgQ2prQ29udiBmcm9tICdjamstY29udic7XG5pbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IHRleHRfbGlzdCB9IGZyb20gJy4uL3V0aWwvY2prJztcbmltcG9ydCBBYnN0cmFjdFRhYmxlRGljdENvcmUsIHsgSURJQ1QsIElESUNUMiwgSU9wdGlvbnMgfSBmcm9tICcuL2NvcmUnO1xuXG4vKipcbiAqIOWOn+eJiCBub2RlLXNlZ21lbnQg55qE5qC85byPXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUYWJsZURpY3RMaW5lIGV4dGVuZHMgQWJzdHJhY3RUYWJsZURpY3RDb3JlPGJvb2xlYW4+XG57XG5cdHB1YmxpYyBleGlzdHMoZGF0YSwgLi4uYXJndilcblx0e1xuXHRcdGxldCB3ID0gdGhpcy5fZXhpc3RzKGRhdGEpO1xuXG5cdFx0bGV0IGJvb2wgPSB0aGlzLlRBQkxFW3ddO1xuXG5cdFx0cmV0dXJuIHR5cGVvZiBib29sID09PSAnYm9vbGVhbicgPyBib29sIDogbnVsbFxuXHR9XG5cblx0YWRkKHdvcmQ6IHN0cmluZyB8IHN0cmluZ1tdKVxuXHR7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkod29yZCkpXG5cdFx0e1xuXHRcdFx0d29yZC5mb3JFYWNoKHYgPT4gc2VsZi5fYWRkKHYpKVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0c2VsZi5fYWRkKHdvcmQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X2FkZCh3b3JkOiBzdHJpbmcpXG5cdHtcblx0XHR3b3JkID0gd29yZC50cmltKCk7XG5cblx0XHRpZiAod29yZClcblx0XHR7XG5cdFx0XHR0aGlzLlRBQkxFW3dvcmRdID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRyZW1vdmUod29yZDogc3RyaW5nKVxuXHR7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYuX3JlbW92ZSh3b3JkKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X3JlbW92ZSh3b3JkOiBzdHJpbmcpXG5cdHtcblx0XHRkZWxldGUgdGhpcy5UQUJMRVt3b3JkXVxuXHR9XG5cblx0anNvbigpXG5cdHtcblx0XHRyZXR1cm4gY2xvbmVEZWVwKHRoaXMuVEFCTEUpXG5cdH1cblxuXHRzdHJpbmdpZnkoTEYgPSBcIlxcblwiKVxuXHR7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG5cdFx0cmV0dXJuIE9iamVjdC5lbnRyaWVzKHNlbGYuVEFCTEUpXG5cdFx0XHQucmVkdWNlKGZ1bmN0aW9uIChhLCBbdywgYm9vbF0pXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChib29sKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGV0IGxpbmUgPSBzdHJpbmdpZnlMaW5lKHcpO1xuXHRcdFx0XHRcdGEucHVzaChsaW5lKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBhXG5cdFx0XHR9LCBbXSlcblx0XHRcdC5qb2luKHR5cGVvZiBMRiA9PT0gJ3N0cmluZycgPyBMRiA6IFwiXFxuXCIpXG5cdFx0XHQ7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFibGVEaWN0TGluZVxuIl19